---
//src/pages/workspace/[workspaceId]/board/[boardId].astro
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import DashboardHeader from '../../../../components/dashboard/DashBoardHeader.astro';
import BoardHeader from '../../../../components/board/BoardHeader.astro';
const { workspaceId, boardId } = Astro.params;
---

<Layout title="Tablero">
  <main id="board-root" data-workspace-id={workspaceId} data-board-id={boardId} class="min-h-screen bg-white">
    {/* Cabecera del dashboard */}
    <DashboardHeader />

    {/* Título del tablero: se actualiza en el cliente al leer Firebase */}
    <div class="p-8 pb-0">
      <h1 id="board-title" class="text-3xl font-bold mb-6 text-gray-800">Cargando tablero...</h1>
    </div>

    {/* Cabecera del board con buscador y opciones (similar a Trello) */}
    <BoardHeader />

    {/* Contenedor de columnas. Se llena desde /src/scripts/board/board-init.ts */}
    <div class="px-8">
      <div id="columns-container">
        <p class="text-gray-600">Cargando columnas...</p>
      </div>
    </div>

  </main>
  
  {/* Inicializamos la lógica de cliente con los IDs de la ruta */}
  <!-- Script procesado: inicializador de BoardPage; IDs se leen desde data attrs del root -->
  <script>
    import { initBoardPage } from '@/scripts/board/board-init.ts';

    // Inicializar la página del board
    initBoardPage();
  </script>  <!-- Hacemos globales estos estilos porque los elementos (columnas/tareas)
    se generan dinámicamente en el cliente y no reciben el atributo de
    "scoping" de Astro. Con is:global aseguras que las clases de Sortable
    (.sortable-*, .blue-background-class) y .task-list apliquen correctamente. -->
  <style is:global>
    .blue-background-class {
      background-color: rgba(59, 130, 246, 0.2);
      border-radius: 6px;
      border: 1px dashed rgba(59, 130, 246, 0.5);
      opacity: 0.3;
    }
    
    /* 1. Ponemos la "mano abierta" ✋ por defecto en todas las tarjetas */
  .task-list > div {
    cursor: grab; /* Esto indica que el elemento es "agarrable" */
    user-select: none;
    -webkit-user-select: none;
  }

  /* 2. Forzamos la "mano cerrada" ✊ en el clon que arrastramos */
  .sortable-fallback {
    opacity: 0.7;
    transform: rotate(3deg);
    box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.2);
    cursor: grabbing !important; /* Le damos MÁXIMA prioridad */
  }

  /* 3. Forzamos la "mano cerrada" ✊ también en el elemento original mientras se arrastra */
  .sortable-chosen {
    cursor: grabbing !important; /* Le damos MÁXIMA prioridad */
  }

  /* Estilos para el campo inline de agregar tarea */
  .add-task-form {
    animation: slideDown 0.2s ease-out;
  }

  .add-task-form .task-input {
    transition: all 0.2s ease;
  }

  .add-task-form .task-input:focus {
    outline: none;
  }

  .add-task-form .ring-2.ring-blue-500.ring-opacity-50 {
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3), 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .add-task-submit {
    transition: all 0.15s ease;
    border-radius: 6px;
    font-weight: 500;
  }

  .add-task-submit:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .cancel-add-task {
    transition: all 0.15s ease;
    border-radius: 4px;
  }

  .cancel-add-task:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-8px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  </style>
</Layout>