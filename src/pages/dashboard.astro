--- 
// src/pages/dashboard.astro
import Layout from "../layouts/Layout.astro";
import DashboardHeader from "../components/dashboard/DashBoardHeader.astro";
import Sidebar from "../components/dashboard/Sidebar.astro";
import DashboardContainer from '../components/dashboard/DashboardContainer.astro';
import Toast from '../components/ui/Toast.astro';
---
<Layout title="Dashboard">
  <div id="loading-screen" class="h-screen flex items-center justify-center fixed inset-0 bg-white z-50">
    <div class="text-center">
      <div class="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      <p class="mt-4 text-gray-600">Cargando dashboard...</p>
    </div>
  </div>

  <div id="app-container" class="hidden h-screen">
    <DashboardHeader />
    <div class="flex h-screen">
      <Sidebar />
      <DashboardContainer client:load /> 
    </div>
  </div>
  <Toast />
</Layout>

<script>
    import { onAuthStateChanged } from "firebase/auth";
    import { auth } from "../firebase/auth";
    import { fetchWorkspaces } from '../firebase/api';
    import type { Workspace } from '../types/domain';
    import { showBoards } from '../store';
    import '../scripts/boards-view.ts';

    const loadingScreen = document.getElementById('loading-screen');
    const appContainer = document.getElementById('app-container');

    function hideLoading() {
      loadingScreen?.classList.add('hidden');
      appContainer?.classList.remove('hidden');
    }

    function renderWorkspaceCard(workspace: Workspace) {
        const workspaceCard = document.createElement('div');
        workspaceCard.className = 'bg-white rounded-lg shadow p-4 flex flex-col justify-between cursor-pointer hover:shadow-lg transition-shadow';
        workspaceCard.innerHTML = `
            <div>
                <h3 class="font-bold text-lg">${workspace.name}</h3>
                <p class="text-sm text-gray-600">${workspace.description || ''}</p>
            </div>
            <div class="text-right mt-4">
                <span class="text-xs text-gray-500">${workspace.memberCount || 0} miembros</span>
            </div>
        `;
        workspaceCard.addEventListener('click', () => {
            showBoards(workspace.id);
        });
        return workspaceCard;
    }

    async function fetchAndRenderWorkspaces(userId: string) {
        const workspacesGrid = document.getElementById('workspaces-grid');
        const loadingMessage = document.getElementById('loading-message');
        if (!workspacesGrid || !loadingMessage) return;

        try {
            const workspaces = await fetchWorkspaces(userId);
            if(loadingMessage) loadingMessage.style.display = 'none';
            if(workspacesGrid) workspacesGrid.innerHTML = ''; // Limpiar antes de renderizar

            if (workspaces.length === 0) {
                if(workspacesGrid) workspacesGrid.innerHTML = '<p class="col-span-full text-center">No se encontraron espacios de trabajo.</p>';
                return;
            }

            workspaces.forEach((workspace) => {
                const card = renderWorkspaceCard(workspace);
                workspacesGrid.appendChild(card);
            });
        } catch (error) {
            console.error("Error fetching workspaces:", error);
            if(loadingMessage) loadingMessage.textContent = 'Error al cargar los espacios de trabajo.';
        }
    }

    onAuthStateChanged(auth, async (user) => {
      if (user) {
        hideLoading();
        // La isla DashboardContainer se renderizará y mostrará la vista de workspaces por defecto.
        // El script de la vista de workspaces se encargará de popularse a sí mismo.
        // Sin embargo, la lógica original requería que esta página cargara los datos iniciales.
        // La mantenemos para asegurar que la vista inicial de workspaces funcione.
        await fetchAndRenderWorkspaces(user.uid);
      } else {
        window.location.href = '/login';
      }
    });
</script>