---
// src/components/dashboard/WorkspacesViewIsland.astro
// Server Island para vista de workspaces - renderiza lista de workspaces del usuario

import WorkspaceCard from '../workspace/WorkspaceCard.astro';
import CreateWorkspaceCard from './CreateWorkspaceCard.astro';
void WorkspaceCard;

// Props para recibir userId y workspaces iniciales
// No se reciben props de userId, el island obtiene el usuario en el cliente
const showCreateButton = true;
const serverWorkspaces: any[] = [];
---

<div id="workspaces-view" class="workspaces-view-island w-full bg-transparent" data-island="workspaces-view">
  <div class="w-full px-6 md:px-12 xl:px-24 2xl:px-40">
    <!-- Header de la vista -->
    <div class="mb-12 pt-8">
      <h1 class="text-4xl font-extrabold text-gray-900 tracking-tight">
        Mis Espacios de Trabajo
      </h1>
      <p class="text-gray-600 mt-3 text-lg">
        Organiza tus proyectos y colabora con tu equipo
      </p>
    </div>
    <!-- Estado de loading -->
    <div id="loading-state" class="flex flex-col items-center justify-center py-24" style="display:none">
      <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mb-6"></div>
      <div class="text-lg text-gray-600">Cargando workspaces...</div>
    </div>
    <!-- Grid de workspaces (se oculta si loading) -->
    <div id="workspaces-grid" class="grid gap-12 w-full grid-cols-[repeat(auto-fit,minmax(260px,1fr))]" style="display:none">
      <div>
        <CreateWorkspaceCard />
      </div>
      <!-- Las tarjetas de workspaces reales se renderizan din√°micamente desde el script del island -->
    </div>
  </div>
  
  <!-- Estado vac√≠o (se muestra cuando no hay workspaces) -->
  <div id="empty-state" class="hidden col-span-full text-center py-16">
    <div class="max-w-md mx-auto">
      <div class="text-gray-400 mb-6">
        <svg class="w-20 h-20 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
        </svg>
      </div>
      <h3 class="text-xl font-semibold text-gray-900 mb-3">
        ¬°Comienza tu primer workspace!
      </h3>
      <p class="text-gray-600 mb-6">
        Los workspaces te ayudan a organizar proyectos y colaborar con tu equipo. 
        Crea uno para empezar.
      </p>
      {showCreateButton && (
        <button 
          class="create-workspace-btn bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
        >
          Crear Mi Primer Workspace
        </button>
      )}
    </div>
  </div>
  
  <!-- Estado de error -->
  <div id="error-state" class="hidden col-span-full text-center py-16">
    <div class="max-w-md mx-auto">
      <div class="text-red-400 mb-4">
        <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-gray-900 mb-2">
        Error al cargar workspaces
      </h3>
      <p class="text-gray-600 mb-4" id="error-message">
        Ha ocurrido un error inesperado
      </p>
      <button 
        id="retry-btn"
        class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors"
      >
        Reintentar
      </button>
    </div>
  </div>
</div>

<script>
  // Script hidratado para funcionalidad interactiva
  import { onAuthStateChanged } from 'firebase/auth';
  import { auth } from '../../firebase/auth';
  import { subscribeToUserWorkspaces } from '../../firebase/api';
  import type { Workspace } from '../../types/domain';
  import type { Unsubscribe } from 'firebase/firestore';
  import { formatRelativeTime } from '../../utils/date.utils';

  console.log('üèùÔ∏è WorkspacesViewIsland: Hidratando en cliente');

  // Estado del componente
  interface ComponentState {
    workspaces: Workspace[];
    loading: boolean;
    error: string | null;
    user: any | null;
  }

  let state: ComponentState = {
    workspaces: [],
    loading: true,
    error: null,
    user: null
  };

  let workspacesUnsubscribe: Unsubscribe | null = null;

  // Elementos del DOM
  const elements = {
    grid: document.getElementById('workspaces-grid'),
    loadingState: document.getElementById('loading-state'),
    emptyState: document.getElementById('empty-state'),
    errorState: document.getElementById('error-state'),
    errorMessage: document.getElementById('error-message'),
    retryBtn: document.getElementById('retry-btn'),
    createBtn: document.getElementById('create-workspace-btn-main')
  };

  // Mostrar/ocultar loading y grid seg√∫n el estado
  function updateVisibility() {
    if (state.loading) {
      elements.loadingState?.removeAttribute('style');
      elements.grid?.setAttribute('style', 'display:none');
    } else {
      elements.loadingState?.setAttribute('style', 'display:none');
      elements.grid?.removeAttribute('style');
    }
  }

  // Funci√≥n para renderizar workspaces
  function renderWorkspaces(workspaces: Workspace[]) {
    if (!elements.grid) return;

    state.loading = false;
    updateVisibility();

    console.log('üèùÔ∏è WorkspacesViewIsland: Renderizando', workspaces.length, 'workspaces');

    // Ocultar estados
    hideAllStates();

    if (workspaces.length === 0) {
      elements.emptyState?.classList.remove('hidden');
      return;
    }

    // Generar HTML: siempre la tarjeta de crear workspace al inicio (HTML directo)
    let workspacesHTML = `
      <div>
        <div tabindex="0" role="button" aria-label="Crear un espacio de trabajo nuevo" id="create-workspace-card" class="flex flex-col items-center justify-center min-w-[260px] h-48 bg-white border-2 border-dashed border-blue-400 rounded-2xl shadow-sm cursor-pointer select-none group focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all duration-200 hover:border-blue-600 hover:bg-blue-50 hover:scale-[1.04] active:scale-100">
          <div class="flex items-center justify-center w-16 h-16 rounded-full bg-blue-100 mb-3 group-hover:bg-blue-200 transition-colors duration-200">
            <svg class="w-10 h-10 text-blue-500 group-hover:text-blue-600 transition-colors duration-200 group-hover:scale-110" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="white" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v8m4-4H8" />
            </svg>
          </div>
          <span class="text-lg font-semibold text-blue-700 text-center leading-tight group-hover:text-blue-800 transition-colors duration-200">
            Crear un espacio de<br />trabajo nuevo
          </span>
        </div>
      </div>
    `;
    workspacesHTML += workspaces.map(workspace => {
      // ...c√≥digo de render de workspace (igual que antes)...
      const memberCount = workspace.members?.length || 0;
      const boardCount = workspace.boards?.length || 0;
      const lastActivity = workspace.updatedAt ? new Date(workspace.updatedAt) : null;
      const isOwner = state.user && workspace.ownerId === state.user.uid;
      const colors = ['blue', 'green', 'purple', 'pink', 'indigo'];
      const colorIndex = workspace.id.charCodeAt(0) % colors.length;
      const color = colors[colorIndex];
      return `
        <div class="workspace-card-container" data-workspace-id="${workspace.id}">
          <a href="/workspace/${workspace.id}/boards" class="block p-6 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md hover:scale-105 transition-all duration-200">
            <div class="flex items-center space-x-3 mb-4">
              <div class="w-12 h-12 bg-${color}-500 rounded-lg flex items-center justify-center text-white font-bold text-lg shadow-md">
                ${workspace.name.split(' ').map(w => w[0]).join('').toUpperCase().slice(0, 2)}
              </div>
              <div class="flex-1 min-w-0">
                <h3 class="text-lg font-semibold text-gray-900 truncate">${workspace.name}</h3>
                ${workspace.description ? `<p class="text-sm text-gray-600 truncate">${workspace.description}</p>` : ''}
              </div>
              ${isOwner ? `
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                  <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clip-rule="evenodd"></path>
                  </svg>
                  Propietario
                </span>
              ` : ''}
            </div>
            <div class="grid grid-cols-2 gap-4 mb-4 text-sm">
              <div class="flex items-center space-x-2 text-gray-600">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
                <span>${boardCount} ${boardCount === 1 ? 'tablero' : 'tableros'}</span>
              </div>
              <div class="flex items-center space-x-2 text-gray-600">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m3 5.197H9m3 0a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
                <span>${memberCount} ${memberCount === 1 ? 'miembro' : 'miembros'}</span>
              </div>
            </div>
            <div class="flex items-center justify-between text-xs text-gray-500 pt-3 border-t border-gray-100">
              <div class="flex items-center space-x-1">
                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>
                  ${lastActivity ? `Actualizado ${formatRelativeTime(lastActivity)}` : 'Sin actividad reciente'}
                </span>
              </div>
              <div class="opacity-0 group-hover:opacity-100 transition-opacity">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                </svg>
              </div>
            </div>
          </a>
        </div>
      `;
    }).join('');

    // Actualizar el grid
    elements.grid.innerHTML = workspacesHTML;

    // Agregar eventos a la tarjeta de creaci√≥n
    const createCard = document.getElementById('create-workspace-card');
    if (createCard) {
      createCard.addEventListener('click', () => {
        document.dispatchEvent(new CustomEvent('create-workspace-requested'));
      });
      createCard.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          document.dispatchEvent(new CustomEvent('create-workspace-requested'));
        }
      });
    }

    // ...resto del c√≥digo de SPA click handlers...
    try {
      if (elements.grid) {
        elements.grid.querySelectorAll('.workspace-card-container a').forEach(a => {
          // // remover listeners previos si existen
          (a as any)._wsClickAttached && a.removeEventListener('click', (a as any)._wsClickFn);
          const fn = (e: Event) => {
            e.preventDefault(); // // prevenir navegaci√≥n por href
            e.stopPropagation();
            const container = (a as HTMLElement).closest('.workspace-card-container') as HTMLElement | null;
            const wid = container?.dataset.workspaceId;
            if (!wid) {
              // // fallback: seguir el href original
              window.location.href = (a as HTMLAnchorElement).href;
              return;
            }

            const showBoardsView = (window as any).showBoardsView;
            if (typeof showBoardsView === 'function') {
              // // Llamada SPA para renderizar tableros en el main
              try { showBoardsView(wid); } catch (err) { console.error('Error calling showBoardsView', err); window.location.href = `/workspace/${wid}/boards`; }
            } else {
              // // Si no existe la API SPA, navegar a la ruta de tableros
              window.location.href = `/workspace/${wid}/boards`;
            }
          };
          a.addEventListener('click', fn);
          (a as any)._wsClickAttached = true;
          (a as any)._wsClickFn = fn;
        });
      }
    } catch (e) {
      console.error('WorkspacesViewIsland: error attaching SPA click handlers', e);
    }
  }

  // Funci√≥n para ocultar todos los estados
  function hideAllStates() {
    elements.loadingState?.classList.add('hidden');
    elements.emptyState?.classList.add('hidden');
    elements.errorState?.classList.add('hidden');
  }

  // Funci√≥n para mostrar estado de error
  function showError(message: string) {
    hideAllStates();
    elements.errorState?.classList.remove('hidden');
    if (elements.errorMessage) {
      elements.errorMessage.textContent = message;
    }
  }

  // Funci√≥n para cargar workspaces
  function loadWorkspaces(user: any) {
    if (!user) {
      state.workspaces = [];
      state.loading = false;
      updateVisibility();
      renderWorkspaces([]);
      return;
    }

    console.log('üèùÔ∏è WorkspacesViewIsland: Cargando workspaces para usuario', user.uid);

    // Limpiar suscripci√≥n anterior
    if (workspacesUnsubscribe) {
      workspacesUnsubscribe();
    }

    try {
      // Suscribirse a workspaces del usuario
      workspacesUnsubscribe = subscribeToUserWorkspaces(user.uid, (workspaces) => {
        console.log('üèùÔ∏è WorkspacesViewIsland: Workspaces actualizados:', workspaces);
        
        state.workspaces = workspaces;
        state.loading = false;
        state.error = null;
        
        renderWorkspaces(workspaces);
      });
    } catch (error) {
      console.error('üèùÔ∏è WorkspacesViewIsland: Error cargando workspaces:', error);
      state.loading = false;
      state.error = 'Error al cargar los workspaces';
      showError('Error al cargar los workspaces');
    }
  }

  // Handler para crear workspace
  function handleCreateWorkspace() {
    // Dispatch event personalizado
    const event = new CustomEvent('create-workspace-requested', {
      detail: { source: 'workspaces-view' }
    });
    document.dispatchEvent(event);
  }

  // Handler para reintentar
  function handleRetry() {
    if (state.user) {
      state.loading = true;
      elements.loadingState?.classList.remove('hidden');
      hideAllStates();
      setTimeout(() => loadWorkspaces(state.user), 500);
    }
  }

  // Inicializaci√≥n del island
  function initializeWorkspacesViewIsland() {
    console.log('üèùÔ∏è WorkspacesViewIsland: Inicializando...');

    // Mostrar loading al inicio
    state.loading = true;
    updateVisibility();

    // Event listeners
    elements.createBtn?.addEventListener('click', handleCreateWorkspace);
    elements.retryBtn?.addEventListener('click', handleRetry);
    
    // Tambi√©n escuchar clicks en botones de crear del estado vac√≠o
    document.querySelectorAll('.create-workspace-btn').forEach(btn => {
      btn.addEventListener('click', handleCreateWorkspace);
    });

    // Suscribirse a cambios de autenticaci√≥n
    onAuthStateChanged(auth, (user) => {
      state.user = user;
      state.loading = true;
      updateVisibility();
      if (user) {
        console.log('üèùÔ∏è WorkspacesViewIsland: Usuario autenticado');
        loadWorkspaces(user);
      } else {
        console.log('üèùÔ∏è WorkspacesViewIsland: Usuario no autenticado');
        state.workspaces = [];
        state.loading = false;
        updateVisibility();
        renderWorkspaces([]);
      }
    });
  }

  // Cleanup
  function cleanupWorkspacesViewIsland() {
    if (workspacesUnsubscribe) {
      workspacesUnsubscribe();
      workspacesUnsubscribe = null;
    }
  }

  // Auto-inicializaci√≥n
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeWorkspacesViewIsland);
  } else {
    initializeWorkspacesViewIsland();
  }

  // Cleanup en beforeunload
  window.addEventListener('beforeunload', cleanupWorkspacesViewIsland);

  // API p√∫blica para debugging
  (window as any).workspacesViewIsland = {
    state: () => state,
    loadWorkspaces,
    renderWorkspaces,
    cleanup: cleanupWorkspacesViewIsland
  };
</script>

<style>
  /* Estilos espec√≠ficos del WorkspacesViewIsland */
  .workspaces-view-island {
    min-height: 400px;
  }
  
  .workspace-card-container a:hover .group-hover\:opacity-100 {
    opacity: 1;
  }
  
  /* Fix para Tailwind din√°mico */
  .bg-blue-500 { background-color: #3b82f6; }
  .bg-green-500 { background-color: #10b981; }
  .bg-purple-500 { background-color: #8b5cf6; }
  .bg-pink-500 { background-color: #ec4899; }
  .bg-indigo-500 { background-color: #6366f1; }
</style>
