---
// src/components/dashboard/SettingsView.astro
export interface Props {
  workspaceId?: string;
}
const { workspaceId } = Astro.props;
---
<div id="settings-content">
  <h1 class="text-2xl font-semibold text-gray-800 mb-8">
    Configuración del Workspace
  </h1>
  <p class="text-gray-600">
    Aquí se mostrarán las opciones de configuración para el workspace con ID: {workspaceId}.
  </p>
</div>

<script>
  import { dashboardView } from '../../store';

  // Función para manejar visibilidad del componente
  function handleVisibility(state: any) {
    const settingsView = document.getElementById('settings-view');

    if (state.currentView === 'settings' && state.selectedWorkspaceId) {
      // Mostrar el componente
      if (settingsView) {
        settingsView.classList.remove('hidden');
      }
    } else {
      // Ocultar el componente
      if (settingsView) {
        settingsView.classList.add('hidden');
      }
    }
  }

  // Esperar a que el DOM esté listo
  function initializeComponent() {
    // Escuchar cambios en el store
    dashboardView.subscribe((state) => {
      console.log('⚙️ SettingsView: Dashboard store cambió:', state);
      handleVisibility(state);
      if (state.currentView === 'settings' && state.selectedWorkspaceId) {
        console.log('⚙️ SettingsView: Cambiando a vista de configuración para workspace:', state.selectedWorkspaceId);
        // Aquí actualizar el componente con el nuevo workspaceId
      }
    });

    // Verificar estado inicial
    const initialState = dashboardView.get();
    console.log('⚙️ SettingsView: Estado inicial del store:', initialState);
    handleVisibility(initialState);
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeComponent);
  } else {
    initializeComponent();
  }
</script>