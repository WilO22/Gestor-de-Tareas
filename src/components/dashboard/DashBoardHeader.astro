---
// src/components/dashboard/DashBoardHeader.astro
---

<header
  class="bg-white border-b border-gray-300 px-4 py-2 flex items-center justify-between"
>
  <div class="flex items-center space-x-4">
    <div class="flex items-center space-x-2">
      <div
        class="w-8 h-8 bg-gradient-to-br from-blue-400 to-blue-600 rounded flex items-center justify-center"
      >
        <span class="text-white font-bold text-sm">D</span>
      </div>
      <a href="/dashboard">
        <span class="text-blue font-semibold text-lg">DashUp</span>
      </a>
    </div>
  </div>

  <div class="flex-1 max-w-md mx-8">
    <div class="relative">
      <input
        type="text"
        placeholder="Buscar"
        class="w-full bg-gray-100 text-gray-800 placeholder-gray-400 px-4 py-2 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
      />
      <svg
        class="absolute right-3 top-2.5 w-5 h-5 text-gray-400"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
        ></path>
      </svg>
    </div>
  </div>

  <div class="flex items-center space-x-3">
    <!-- Bot√≥n de crear removido - usar el del dashboard principal -->
    <div class="flex items-center space-x-2">
      <button class="p-2 hover:bg-gray-100 rounded">
        <!-- Icono de notificaciones -->
      </button>
      <button class="p-2 hover:bg-gray-100 rounded">
        <!-- Icono de informaci√≥n -->
      </button>
      <button class="p-2 hover:bg-gray-100 rounded">
        <!-- Icono de ayuda -->
      </button>

      <div class="relative">
        <button
          id="userMenuBtn"
          class="w-8 h-8 bg-gray-400 rounded-full flex items-center justify-center font-bold text-sm text-white hover:bg-gray-500 transition-colors cursor-pointer"
          title="Men√∫ de usuario"
        >
          <span id="userAvatarButton">U</span>
        </button>

        <div
          id="userMenu"
          class="hidden absolute right-0 mt-2 w-80 bg-white text-black rounded-lg shadow-xl border z-50"
        >
          <div class="p-4 border-b">
            <div class="flex items-center space-x-3">
              <div
                id="userAvatarMenu"
                class="w-10 h-10 bg-gray-400 rounded-full flex items-center justify-center font-bold text-white"
              >
                U
              </div>
              <div>
                <div id="userDisplayName" class="font-semibold">Cargando...</div>
                <div id="userEmail" class="text-sm text-gray-600">
                  Cargando...
                </div>
              </div>
            </div>
          </div>

          <!-- // Secci√≥n DASHUP simplificada (igual que imagen 2) -->
          <div class="border-t py-2">
            <div
              class="px-4 py-1 text-xs font-semibold text-gray-500 uppercase"
            >
            DASHUP
            </div>
            <a href="#" class="block px-4 py-2 hover:bg-gray-100"
              >Perfil y visibilidad</a
            >
            <a href="#" class="block px-4 py-2 hover:bg-gray-100"
              >Tarjetas</a
            >
          </div>

          <!-- // Crear Espacio de trabajo (mantenido) -->
          <div class="border-t py-2">
            <button
              id="create-workspace-menu-btn"
              class="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center"
            >
              <svg
                class="w-4 h-4 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                ></path>
              </svg>
              Crear Espacio de trabajo
            </button>
          </div>

          <!-- // Cerrar sesi√≥n (mantenido) -->
          <div class="border-t py-2">
            <button
              id="logout-btn"
              class="w-full text-left block px-4 py-2 hover:bg-gray-100 text-red-600"
            >
              Cerrar sesi√≥n
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  import { authStore } from '../../stores/auth.store';
  import { getInitials } from '../../scripts/shared/auth-init';
  import { signOut } from 'firebase/auth';
  import { auth } from '../../firebase/client-config';

  // Funci√≥n para actualizar la UI del usuario
  function updateUserUI(user: any) {
    if (!user) {
      // Usuario no autenticado
      updateUserDisplay('U', 'No autenticado', 'Inicia sesi√≥n');
      return;
    }

    // Obtener iniciales
    const initials = getInitials(user.displayName, user.email);

    // Actualizar elementos del DOM
    updateUserDisplay(
      initials,
      user.displayName || user.email?.split('@')[0] || 'Usuario',
      user.email || ''
    );
  }

  // Funci√≥n helper para actualizar elementos del DOM
  function updateUserDisplay(initials: string, displayName: string, email: string) {
    // Avatar en el bot√≥n
    const avatarButton = document.getElementById('userAvatarButton');
    if (avatarButton) {
      avatarButton.textContent = initials;
    }

    // Avatar en el men√∫
    const avatarMenu = document.getElementById('userAvatarMenu');
    if (avatarMenu) {
      avatarMenu.textContent = initials;
    }

    // Nombre en el men√∫
    const displayNameEl = document.getElementById('userDisplayName');
    if (displayNameEl) {
      displayNameEl.textContent = displayName;
    }

    // Email en el men√∫
    const emailEl = document.getElementById('userEmail');
    if (emailEl) {
      emailEl.textContent = email;
    }
  }

  // Funci√≥n para manejar el logout
  async function handleLogout() {
    try {
      await signOut(auth);
      console.log('‚úÖ Sesi√≥n cerrada exitosamente');
      window.location.href = '/login';
    } catch (error) {
      console.error('‚ùå Error cerrando sesi√≥n:', error);
      // Mostrar toast de error si existe
      if ((window as any).showToast) {
        (window as any).showToast({
          message: 'Error al cerrar sesi√≥n',
          type: 'error'
        });
      }
    }
  }

  // Funci√≥n para toggle del men√∫ de usuario
  function toggleUserMenu() {
    const menu = document.getElementById('userMenu');
    if (menu) {
      menu.classList.toggle('hidden');
    }
  }

  // Inicializar cuando el DOM est√© listo
  function initUserMenu() {
    console.log('üë§ Inicializando men√∫ de usuario...');

    // Suscribirse a cambios del authStore
    authStore.subscribe((state) => {
      updateUserUI(state.user);
    });

    // Estado inicial
    const initialState = authStore.getState();
    updateUserUI(initialState.user);

    // Configurar event listeners
    const userMenuBtn = document.getElementById('userMenuBtn');
    if (userMenuBtn) {
      userMenuBtn.addEventListener('click', toggleUserMenu);
    }

    const logoutBtn = document.getElementById('logout-btn');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', handleLogout);
    }

    // Cerrar men√∫ al hacer click fuera
    document.addEventListener('click', (e) => {
      const menu = document.getElementById('userMenu');
      const button = document.getElementById('userMenuBtn');

      if (menu && button && !menu.contains(e.target as Node) && !button.contains(e.target as Node)) {
        menu.classList.add('hidden');
      }
    });

    // Configurar bot√≥n de crear workspace (delegar al dashboard)
    const createWorkspaceBtn = document.getElementById('create-workspace-menu-btn');
    if (createWorkspaceBtn) {
      createWorkspaceBtn.addEventListener('click', () => {
        // Disparar evento para que el dashboard maneje la creaci√≥n
        document.dispatchEvent(new CustomEvent('create-workspace-requested'));
        // Cerrar men√∫
        const menu = document.getElementById('userMenu');
        if (menu) menu.classList.add('hidden');
      });
    }

    console.log('üë§ Men√∫ de usuario inicializado');
  }

  // Inicializar cuando el DOM est√© listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initUserMenu);
  } else {
    initUserMenu();
  }
</script>

