---
// src/components/dashboard/DashBoardHeader.astro
---

<header
  class="bg-white border-b border-gray-300 px-4 py-2 flex items-center justify-between"
>
  <div class="flex items-center space-x-4">
    <div class="flex items-center space-x-2">
      <div
        class="w-8 h-8 bg-gradient-to-br from-blue-400 to-blue-600 rounded flex items-center justify-center"
      >
        <span class="text-white font-bold text-sm">D</span>
      </div>
      <a href="/dashboard">
        <span class="text-blue font-semibold text-lg">DashUp</span>
      </a>
    </div>
  </div>

  <div class="flex-1 max-w-md mx-8">
    <div class="relative">
      <input
        type="text"
        placeholder="Buscar"
        class="w-full bg-gray-100 text-gray-800 placeholder-gray-400 px-4 py-2 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
      />
      <svg
        class="absolute right-3 top-2.5 w-5 h-5 text-gray-400"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
        ></path>
      </svg>
    </div>
  </div>

  <div class="flex items-center space-x-3">
    <!-- Botón de crear removido - usar el del dashboard principal -->
    <div class="flex items-center space-x-2">
      <button class="p-2 hover:bg-gray-100 rounded">
        <!-- Icono de notificaciones -->
      </button>
      <button class="p-2 hover:bg-gray-100 rounded">
        <!-- Icono de información -->
      </button>
      <button class="p-2 hover:bg-gray-100 rounded">
        <!-- Icono de ayuda -->
      </button>
     
      <div class="relative">
        <button
          id="userMenuBtn"
          class="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center font-bold text-sm text-black hover:bg-yellow-400 transition-colors cursor-pointer"
        >
          <span id="userAvatarButton">YR</span>
        </button>
        
        <div
          id="userMenu"
          class="hidden absolute right-0 mt-2 w-80 bg-white text-black rounded-lg shadow-xl border z-50"
        >
          <div class="p-4 border-b">
            <div class="flex items-center space-x-3">
              <div
                id="userAvatarMenu"
                class="w-10 h-10 bg-yellow-500 rounded-full flex items-center justify-center font-bold"
              >
                YR
              </div>
              <div>
                <div id="userDisplayName" class="font-semibold">Cargando...</div>
                <div id="userEmail" class="text-sm text-gray-600">
                  Cargando...
                </div>
              </div>
            </div>
          </div>
          
          <!-- // Sección DASHUP simplificada (igual que imagen 2) -->
          <div class="border-t py-2">
            <div
              class="px-4 py-1 text-xs font-semibold text-gray-500 uppercase"
            >
            DASHUP
            </div>
            <a href="#" class="block px-4 py-2 hover:bg-gray-100"
              >Perfil y visibilidad</a
            >
            <a href="#" class="block px-4 py-2 hover:bg-gray-100"
              >Tarjetas</a
            >
          </div>
          
          <!-- // Crear Espacio de trabajo (mantenido) -->
          <div class="border-t py-2">
            <button
              id="create-workspace-menu-btn"
              class="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center"
            >
              <svg
                class="w-4 h-4 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                ></path>
              </svg>
              Crear Espacio de trabajo
            </button>
          </div>
          
          <!-- // Cerrar sesión (mantenido) -->
          <div class="border-t py-2">
            <button
              id="logout-btn"
              class="w-full text-left block px-4 py-2 hover:bg-gray-100 text-red-600"
            >
              Cerrar sesión
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<!-- Modal para crear workspace -->
<div id="create-workspace-modal" class="fixed inset-0 z-50" style="display: none;">
  <!-- // Overlay con efecto de desenfoque y oscurecimiento -->
  <div class="absolute inset-0 bg-black/40 backdrop-blur-sm"></div>
  
  <!-- // Contenedor del modal centrado -->
  <div class="relative flex items-center justify-center h-full">
    <div class="bg-white rounded-lg p-6 w-96">
      <h3 class="text-lg font-semibold mb-4">Crear nuevo espacio de trabajo</h3>
      <form id="workspace-form">
        <input 
          type="text" 
          id="create-workspace-name-input" 
          placeholder="Nombre del espacio de trabajo" 
          class="w-full px-3 py-2 border rounded-lg mb-4" 
          required
        />
        <div class="flex gap-2">
          <button type="submit" class="flex-1 px-4 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700">
            Crear
          </button>
          <button type="button" id="cancel-modal" class="px-4 py-2 text-gray-600 bg-gray-200 rounded-lg hover:bg-gray-300">
            Cancelar
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  import { signOut } from 'firebase/auth';
  import { auth } from '../../firebase/auth';
  import { createWorkspace } from '../../firebase/api';
  // // ELIMINADO: import { getUserProfile } from '../../firebase/users'; - No es necesario

  // // Función para generar iniciales desde un nombre o email
  function generateInitials(name: string, email: string): string {
    if (name && name.trim()) {
      // // Si hay displayName, usar sus iniciales
      const nameParts = name.trim().split(' ');
      if (nameParts.length >= 2) {
        return (nameParts[0][0] + nameParts[1][0]).toUpperCase();
      } else {
        return name.substring(0, 2).toUpperCase();
      }
    } else {
      // // Si no hay displayName, usar iniciales del email
      const emailPrefix = email.split('@')[0];
      if (emailPrefix.length >= 2) {
        return (emailPrefix[0] + emailPrefix[1]).toUpperCase();
      } else {
        return emailPrefix.toUpperCase();
      }
    }
  }

  // // Función para actualizar la información del usuario en el menú
  async function updateUserInfo() {
    const user = auth.currentUser;
    if (!user) return;

    try {
      // // SIMPLIFICADO: Usar directamente la información de Firebase Auth
      const displayName = user.displayName || '';
      const email = user.email || '';
      
      // // Generar iniciales
      const initials = generateInitials(displayName, email);
      
      // // Actualizar avatar button
      const avatarButton = document.getElementById('userAvatarButton');
      if (avatarButton) {
        avatarButton.textContent = initials;
      }
      
      // // Actualizar avatar en el menú
      const avatarMenu = document.getElementById('userAvatarMenu');
      if (avatarMenu) {
        avatarMenu.textContent = initials;
      }
      
      // // Actualizar nombre en el menú
      const displayNameElement = document.getElementById('userDisplayName');
      if (displayNameElement) {
        displayNameElement.textContent = displayName || email.split('@')[0];
      }
      
      // // Actualizar email en el menú
      const emailElement = document.getElementById('userEmail');
      if (emailElement) {
        emailElement.textContent = email;
      }
      
      console.log('✅ Información de usuario actualizada desde Firebase Auth:', { displayName, email, initials });
    } catch (error) {
      console.error('❌ Error actualizando información de usuario:', error);
    }
  }

  // Elementos del DOM
  const userMenuBtn = document.getElementById('userMenuBtn');
  const userMenu = document.getElementById('userMenu');
  const logoutBtn = document.getElementById('logout-btn');
  const createWorkspaceBtn = document.getElementById('header-create-workspace-btn');
  const createWorkspaceMenuBtn = document.getElementById('create-workspace-menu-btn');
  const createWorkspaceModal = document.getElementById('create-workspace-modal');
  const workspaceForm = document.getElementById('workspace-form');
  const workspaceNameInput = document.getElementById('create-workspace-name-input') as HTMLInputElement;
  const cancelModal = document.getElementById('cancel-modal');

  // Funcionalidad del menú de usuario
  if (userMenuBtn && userMenu) {
    userMenuBtn.addEventListener('click', function(e) {
      e.stopPropagation();
      userMenu.classList.toggle('hidden');
    });

    // Cerrar menú al hacer clic fuera
    document.addEventListener('click', function(e) {
      if (e.target instanceof Node) {
        if (!userMenu.contains(e.target) && !userMenuBtn.contains(e.target)) {
          userMenu.classList.add('hidden');
        }
      }
    });
  }

  // Funciones del modal
  function showWorkspaceModal() {
    if (createWorkspaceModal) {
      createWorkspaceModal.style.display = 'block';
    }
    if (userMenu) {
      userMenu.classList.add('hidden');
    }
  }

  function hideWorkspaceModal() {
    if (createWorkspaceModal) {
      createWorkspaceModal.style.display = 'none';
    }
    if (workspaceNameInput) {
      workspaceNameInput.value = '';
    }
  }

  // Event listeners para mostrar modal
  if (createWorkspaceBtn) {
    createWorkspaceBtn.addEventListener('click', showWorkspaceModal);
  }

  if (createWorkspaceMenuBtn) {
    createWorkspaceMenuBtn.addEventListener('click', showWorkspaceModal);
  }

  if (cancelModal) {
    cancelModal.addEventListener('click', hideWorkspaceModal);
  }

  // Cerrar modal al hacer clic fuera
  if (createWorkspaceModal) {
    createWorkspaceModal.addEventListener('click', (e) => {
      if (e.target === createWorkspaceModal) {
        hideWorkspaceModal();
      }
    });
  }

  // Funcionalidad para crear workspace
  if (workspaceForm) {
    workspaceForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      const workspaceName = workspaceNameInput?.value;
      
      if (workspaceName) {
        try {
          const user = auth.currentUser;
          if (user) {
            await createWorkspace(workspaceName, user.uid);
            hideWorkspaceModal();
            // Recargar la página para mostrar el nuevo workspace
            window.location.reload();
          }
        } catch (error) {
          console.error('Error al crear workspace:', error);
        }
      }
    });
  }

  // Funcionalidad de logout
  if (logoutBtn) {
    logoutBtn.addEventListener('click', async function() {
      try {
        await signOut(auth);
        window.location.href = '/login';
      } catch (error) {
        console.error('Error al cerrar sesión:', error);
      }
    });
  }

  // // Actualizar información del usuario cuando se carga el componente
  document.addEventListener('DOMContentLoaded', () => {
    console.log('🔄 DashBoardHeader cargado, actualizando info de usuario...');
    
    // // Escuchar cambios en el estado de autenticación
    auth.onAuthStateChanged(async (user) => {
      if (user) {
        console.log('👤 Usuario autenticado, actualizando información...');
        await updateUserInfo();
      } else {
        console.log('❌ Usuario no autenticado');
      }
    });
    
    // // También actualizar inmediatamente si ya hay un usuario
    if (auth.currentUser) {
      updateUserInfo();
    }
  });
</script>
