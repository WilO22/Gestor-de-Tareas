---
// src/components/dashboard/InviteMemberModal.astro
// Modal para invitar miembros al workspace
---

<div id="invite-member-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
      <!-- Header -->
      <div class="flex items-center justify-between p-6 border-b border-gray-200">
        <h3 class="text-lg font-semibold text-gray-900">Invitar miembros</h3>
        <button id="close-invite-modal" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Body -->
      <div class="p-6">
        <p class="text-sm text-gray-600 mb-4">
          Invita a nuevos miembros al workspace envi√°ndoles un email con un enlace de invitaci√≥n.
        </p>

        <form id="invite-form">
          <!-- Email input -->
          <div class="mb-4">
            <label for="invitee-email" class="block text-sm font-medium text-gray-700 mb-2">
              Email del invitado *
            </label>
            <input
              type="email"
              id="invitee-email"
              name="inviteeEmail"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="correo@ejemplo.com"
            />
          </div>

          <!-- Message input -->
          <div class="mb-6">
            <label for="invitation-message" class="block text-sm font-medium text-gray-700 mb-2">
              Mensaje personal (opcional)
            </label>
            <textarea
              id="invitation-message"
              name="message"
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="Hola, me gustar√≠a que te unas a nuestro workspace..."
            ></textarea>
          </div>

          <!-- Error message -->
          <div id="invite-error" class="hidden mb-4 p-3 bg-red-50 border border-red-200 rounded-md">
            <p class="text-sm text-red-600" id="invite-error-text"></p>
          </div>

          <!-- Success message -->
          <div id="invite-success" class="hidden mb-4 p-3 bg-green-50 border border-green-200 rounded-md">
            <p class="text-sm text-green-600" id="invite-success-text"></p>
          </div>
        </form>
      </div>

      <!-- Footer -->
      <div class="flex items-center justify-end space-x-3 p-6 border-t border-gray-200">
        <button
          id="cancel-invite-btn"
          class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors"
        >
          Cancelar
        </button>
        <button
          id="send-invite-btn"
          class="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <span id="send-invite-text">Enviar invitaci√≥n</span>
          <svg id="send-invite-spinner" class="hidden animate-spin h-4 w-4 ml-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Script para el modal de invitaci√≥n
  import { createInvitation } from '../../firebase/invitations';
  import { dashboardView } from '../../store/store';

  let currentWorkspaceId: string = '';

  // Funci√≥n para mostrar el modal
  function showInviteModal(workspaceId: string) {
    console.log('üéØ Mostrando modal de invitaci√≥n para workspace:', workspaceId);
    currentWorkspaceId = workspaceId;

    const modal = document.getElementById('invite-member-modal');
    if (modal) {
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';

      // Reset form
      const form = document.getElementById('invite-form') as HTMLFormElement;
      if (form) form.reset();

      // Hide messages
      hideMessages();

      // Focus email input
      const emailInput = document.getElementById('invitee-email') as HTMLInputElement;
      if (emailInput) emailInput.focus();
    }
  }

  // Funci√≥n para ocultar el modal
  function hideInviteModal() {
    console.log('üéØ Ocultando modal de invitaci√≥n');
    const modal = document.getElementById('invite-member-modal');
    if (modal) {
      modal.classList.add('hidden');
      document.body.style.overflow = '';
    }
  }

  // Funci√≥n para mostrar mensajes de error
  function showErrorMessage(message: string) {
    const errorDiv = document.getElementById('invite-error');
    const errorText = document.getElementById('invite-error-text');
    if (errorDiv && errorText) {
      errorText.textContent = message;
      errorDiv.classList.remove('hidden');
    }
    const successDiv = document.getElementById('invite-success');
    if (successDiv) successDiv.classList.add('hidden');
  }

  // Funci√≥n para mostrar mensajes de √©xito
  function showSuccessMessage(message: string) {
    const successDiv = document.getElementById('invite-success');
    const successText = document.getElementById('invite-success-text');
    if (successDiv && successText) {
      successText.textContent = message;
      successDiv.classList.remove('hidden');
    }
    const errorDiv = document.getElementById('invite-error');
    if (errorDiv) errorDiv.classList.add('hidden');
  }

  // Funci√≥n para ocultar mensajes
  function hideMessages() {
    const errorDiv = document.getElementById('invite-error');
    const successDiv = document.getElementById('invite-success');
    if (errorDiv) errorDiv.classList.add('hidden');
    if (successDiv) successDiv.classList.add('hidden');
  }

  // Funci√≥n para manejar el env√≠o de la invitaci√≥n
  async function handleSendInvitation(event: Event) {
    event.preventDefault();

    if (!currentWorkspaceId) {
      showErrorMessage('Error: No se especific√≥ un workspace v√°lido');
      return;
    }

    const form = document.getElementById('invite-form') as HTMLFormElement;
    if (!form) return;

    const formData = new FormData(form);
    const inviteeEmail = (formData.get('inviteeEmail') as string)?.trim();
    const message = (formData.get('message') as string)?.trim();

    // Validaciones
    if (!inviteeEmail) {
      showErrorMessage('Por favor ingresa un email v√°lido');
      return;
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(inviteeEmail)) {
      showErrorMessage('Por favor ingresa un email v√°lido');
      return;
    }

    // Mostrar loading
    const sendBtn = document.getElementById('send-invite-btn') as HTMLButtonElement;
    const sendText = document.getElementById('send-invite-text');
    const sendSpinner = document.getElementById('send-invite-spinner');
    if (sendBtn) sendBtn.disabled = true;
    if (sendText) sendText.textContent = 'Enviando...';
    if (sendSpinner) sendSpinner.classList.remove('hidden');

    hideMessages();

    try {
      console.log('üìß Enviando invitaci√≥n a:', inviteeEmail);

      const result = await createInvitation(currentWorkspaceId, inviteeEmail, message);

      if (result.success) {
        console.log('‚úÖ Invitaci√≥n enviada exitosamente');
        showSuccessMessage('Invitaci√≥n enviada correctamente. El invitado recibir√° un email con el enlace de aceptaci√≥n.');

        // Reset form despu√©s de 2 segundos
        setTimeout(() => {
          if (form) form.reset();
          hideMessages();
        }, 2000);

      } else {
        console.error('‚ùå Error enviando invitaci√≥n:', result.error);
        showErrorMessage(result.error || 'Error desconocido enviando la invitaci√≥n');
      }

    } catch (error) {
      console.error('‚ùå Error en handleSendInvitation:', error);
      showErrorMessage('Error enviando la invitaci√≥n. Int√©ntalo de nuevo.');
    } finally {
      // Ocultar loading
      if (sendBtn) sendBtn.disabled = false;
      if (sendText) sendText.textContent = 'Enviar invitaci√≥n';
      if (sendSpinner) sendSpinner.classList.add('hidden');
    }
  }

  // Inicializar event listeners cuando el DOM est√© listo
  function initializeModal() {
    console.log('üéØ Inicializando modal de invitaci√≥n');

    // Event listeners para el modal
    const closeBtn = document.getElementById('close-invite-modal');
    const cancelBtn = document.getElementById('cancel-invite-btn');
    const sendBtn = document.getElementById('send-invite-btn');
    const form = document.getElementById('invite-form');

    if (closeBtn) closeBtn.addEventListener('click', hideInviteModal);
    if (cancelBtn) cancelBtn.addEventListener('click', hideInviteModal);
    if (sendBtn) sendBtn.addEventListener('click', handleSendInvitation);
    if (form) form.addEventListener('submit', handleSendInvitation);

    // Cerrar modal al hacer clic fuera
    const modal = document.getElementById('invite-member-modal');
    if (modal) {
      modal.addEventListener('click', (event) => {
        if (event.target === modal) {
          hideInviteModal();
        }
      });
    }

    // Exponer funci√≥n global para que MembersTab pueda abrir el modal
    (window as any).showInviteModal = showInviteModal;
  }

  // Inicializar cuando el DOM est√© listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeModal);
  } else {
    initializeModal();
  }
</script>