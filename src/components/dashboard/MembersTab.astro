---
// src/components/dashboard/MembersTab.astro
// Componente lazy para la secci√≥n de miembros
---

<div id="members-content" class="tab-content">
  <div class="mb-6">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-semibold text-gray-800">Miembros del Espacio de Trabajo</h3>
      <div class="flex items-center space-x-2">
        <button id="generate-link-btn" class="px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-2" title="Generar enlace de invitaci√≥n compartible">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
          </svg>
          <span class="hidden sm:inline">Enlace</span>
        </button>
        <button id="invite-member-btn" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          <span>Invitar miembros</span>
        </button>
      </div>
    </div>
    <p class="text-sm text-gray-600 mt-2">Los miembros del Espacio de trabajo pueden ver todos los tableros visibles para el Espacio de trabajo, unirse a ellos y crear nuevos tableros en el Espacio de trabajo.</p>
  </div>

  <!-- Lista de miembros -->
  <div id="members-list" class="space-y-3">
    <div class="text-center text-gray-500 py-8">
      Cargando miembros...
    </div>
  </div>
</div>

<script>
  // Script espec√≠fico para la gesti√≥n de miembros
  import { subscribeToWorkspaceMembers } from '../../firebase/api';
  import { onAuthStateChanged, auth } from '../../firebase/auth';
  import { dashboardView } from '../../store/store';

  let membersUnsubscribe: any = null;
  let currentWorkspaceId: string = '';
  let currentUser: any = null;

  // Funci√≥n para mostrar mensajes de error usando el sistema de toast
  function showErrorMessage(message: string, isError: boolean = true) {
    console.error('‚ùå MembersTab Error:', message);

    // Intentar usar el sistema de toast si est√° disponible
    if (typeof (window as any).showToast === 'function') {
      (window as any).showToast({
        message: message,
        type: isError ? 'error' : 'warning',
        duration: 5000
      });
    } else {
      // Fallback: mostrar alert
      alert(message);
    }
  }

  // Funci√≥n para mostrar mensajes de √©xito
  function showSuccessMessage(message: string) {
    console.log('‚úÖ MembersTab Success:', message);

    // Intentar usar el sistema de toast si est√° disponible
    if (typeof (window as any).showToast === 'function') {
      (window as any).showToast({
        message: message,
        type: 'success',
        duration: 3000
      });
    }
  }

  // Funci√≥n para manejar visibilidad del componente
  function handleVisibility(state: any) {
    console.log('üë• MembersTab: handleVisibility llamado con estado:', state);

    if (state.currentView === 'members' && state.selectedWorkspaceId) {
      console.log('üë• MembersTab: Vista de miembros activa para workspace:', state.selectedWorkspaceId);
      // El contenedor padre ya deber√≠a estar visible, solo necesitamos cargar los miembros
      if (state.selectedWorkspaceId !== currentWorkspaceId) {
        console.log('üë• MembersTab: Cargando miembros para nuevo workspace:', state.selectedWorkspaceId);
        loadWorkspaceMembers(state.selectedWorkspaceId);
      }
    } else {
      console.log('üë• MembersTab: Vista de miembros inactiva');
      // No necesitamos ocultar nada aqu√≠, el contenedor padre se encarga de eso
    }
  }

  // Esperar a que el DOM est√© listo
  function initializeComponent() {
    // Suscribirse a cambios del store para manejar visibilidad
    dashboardView.subscribe((state) => {
      console.log('ÔøΩ MembersTab: Dashboard store cambi√≥:', state);
      handleVisibility(state);
    });

    // Verificar estado inicial
    const initialState = dashboardView.get();
    console.log('ÔøΩ MembersTab: Estado inicial del store:', initialState);
    handleVisibility(initialState);
  }

  // Inicializar cuando el DOM est√© listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeComponent);
  } else {
    initializeComponent();
  }

  // Funci√≥n para cargar miembros del workspace
  function loadWorkspaceMembers(workspaceId: string) {
    console.log('üöÄ loadWorkspaceMembers llamada con workspaceId:', workspaceId);

    if (!workspaceId) {
      console.error('‚ùå No workspaceId provided to loadWorkspaceMembers');
      showErrorMessage('Error: No se especific√≥ un workspace v√°lido', false);
      return;
    }

    // Verificar si el usuario est√° autenticado
    if (!currentUser) {
      console.log('üîí Usuario no autenticado, mostrando mensaje de autenticaci√≥n');
      showErrorMessage('Debes iniciar sesi√≥n para ver los miembros del workspace. <a href="/login" class="text-blue-600 hover:text-blue-800">Haz clic aqu√≠ para iniciar sesi√≥n</a>', false);
      return;
    }

    // Si es el mismo workspaceId, no recargar
    if (currentWorkspaceId === workspaceId) {
      console.log('üîÑ Mismo workspaceId, no recargando');
      return;
    }

    currentWorkspaceId = workspaceId;
    console.log('üîÑ Cargando miembros para workspace:', workspaceId, 'usuario:', currentUser.uid);

    // Limpiar suscripci√≥n anterior
    if (membersUnsubscribe) {
      console.log('üßπ Limpiando suscripci√≥n anterior');
      membersUnsubscribe();
      membersUnsubscribe = null;
    }

    // Mostrar loading
    const membersList = document.getElementById('members-list');
    if (membersList) {
      membersList.innerHTML = `
        <div class="text-center text-gray-500 py-8">
          <svg class="animate-spin h-8 w-8 mx-auto mb-4 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Cargando miembros...
        </div>
      `;
    }

    // Suscribirse a cambios en miembros
    try {
      console.log('üì° Suscribi√©ndose a cambios de miembros para workspace:', workspaceId);
      membersUnsubscribe = subscribeToWorkspaceMembers(workspaceId, (members) => {
        console.log('üìä Miembros recibidos para workspace', workspaceId, ':', members.length, 'miembros');
        if (members && members.length > 0) {
          console.log('‚úÖ Miembros v√°lidos recibidos, renderizando...');
          renderMembers(members);
        } else {
          console.log('‚ö†Ô∏è No se recibieron miembros o lista vac√≠a');
          renderMembers([]);
        }
      });
      console.log('‚úÖ Suscripci√≥n a miembros configurada correctamente');
    } catch (error) {
      console.error('‚ùå Error al configurar suscripci√≥n a miembros:', error);
      showErrorMessage('Error al cargar los miembros. Int√©ntalo de nuevo.', true);
      return;
    }

    // Configurar timeout para detectar si no se reciben datos
    setTimeout(() => {
      const membersList = document.getElementById('members-list');
      if (membersList && membersList.innerHTML.includes('Cargando miembros')) {
        console.warn('‚ö†Ô∏è Timeout: No se recibieron datos de miembros despu√©s de 10 segundos para workspace:', workspaceId);
        showErrorMessage('La carga de miembros est√° tardando m√°s de lo esperado. Puede ser un problema de conexi√≥n o permisos.', true);
      }
    }, 10000);
  }

  // Funci√≥n showErrorMessage eliminada - ahora usa el sistema de toast global
  // La funci√≥n duplicada fue removida para evitar conflictos

  // Funci√≥n para renderizar lista de miembros
  function renderMembers(members: any[]) {
    console.log('üé® Renderizando miembros:', members?.length || 0, 'miembros');
    
    const membersList = document.getElementById('members-list');
    if (!membersList) {
      console.error('‚ùå No se encontr√≥ el elemento members-list');
      return;
    }

    if (!members || members.length === 0) {
      console.log('üì≠ No hay miembros para mostrar');
      membersList.innerHTML = `
        <div class="text-center text-gray-500 py-8">
          <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a4 4 0 00-3-3.87M9 20H4v-2a4 4 0 013-3.87M16 3.13a4 4 0 010 7.75M8 3.13a4 4 0 000 7.75"></path>
          </svg>
          <p class="text-sm">No hay miembros en este workspace</p>
          <p class="text-xs text-gray-400 mt-1">Los miembros aparecer√°n aqu√≠ cuando sean agregados</p>
        </div>
      `;
      return;
    }

    console.log('‚úÖ Renderizando', members.length, 'miembros');
    membersList.innerHTML = members.map(member => {
      const displayName = member.displayName || member.email?.split('@')[0] || 'Usuario';
      const email = member.email || '';
      const role = member.role || 'member';
      const initials = displayName.charAt(0).toUpperCase();

      console.log('üë§ Renderizando miembro:', { displayName, email, role });

      return `
        <div class="flex items-center justify-between p-4 bg-white rounded-lg border border-gray-200 hover:shadow-sm transition-shadow">
          <div class="flex items-center space-x-3">
            <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold">
              ${initials}
            </div>
            <div>
              <p class="font-medium text-gray-900">${displayName}</p>
              <p class="text-sm text-gray-600">${email}</p>
            </div>
          </div>
          <div class="flex items-center space-x-2">
            <span class="px-2 py-1 text-xs font-medium rounded-full ${
              role === 'owner' ? 'bg-purple-100 text-purple-800' :
              role === 'admin' ? 'bg-blue-100 text-blue-800' :
              'bg-gray-100 text-gray-800'
            }">
              ${role === 'owner' ? 'Propietario' :
                role === 'admin' ? 'Administrador' : 'Miembro'}
            </span>
            <button class="text-gray-400 hover:text-gray-600 p-1 rounded" title="Opciones">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01"></path>
              </svg>
            </button>
          </div>
        </div>
      `;
    }).join('');

    console.log('‚úÖ Miembros renderizados exitosamente');
  }

  // Funci√≥n para invitar miembros
  function inviteMember(email: string) {
    console.log('üéØ Invitando miembro:', email);
    // Implementar l√≥gica de invitaci√≥n
  }

  // Escuchar cambios de workspace desde el store del dashboard
  function setupDashboardStoreListener() {
    // Suscribirse a cambios en el store del dashboard
    const unsubscribe = dashboardView.subscribe((state) => {
      console.log('üì° Dashboard store cambi√≥:', state);
      
      // Solo procesar si estamos en la vista de miembros
      if (state.currentView === 'members' && state.selectedWorkspaceId) {
        console.log('üë• Vista de miembros seleccionada, cargando workspace:', state.selectedWorkspaceId);
        loadWorkspaceMembers(state.selectedWorkspaceId);
      }
    });

    // Verificar estado inicial
    const initialState = dashboardView.get();
    if (initialState.currentView === 'members' && initialState.selectedWorkspaceId) {
      console.log('ÔøΩ Estado inicial: vista de miembros con workspace:', initialState.selectedWorkspaceId);
      loadWorkspaceMembers(initialState.selectedWorkspaceId);
    }

    return unsubscribe;
  }

  // Configurar listener de autenticaci√≥n
  function setupAuthListener() {
    onAuthStateChanged(auth, (user) => {
      console.log('üë§ Estado de autenticaci√≥n cambi√≥:', user ? 'Autenticado' : 'No autenticado', user?.uid);
      currentUser = user;

      // Si el usuario se autentic√≥ y tenemos un workspaceId, recargar miembros
      if (user && currentWorkspaceId) {
        console.log('üîÑ Usuario autenticado, recargando miembros para workspace:', currentWorkspaceId);
        loadWorkspaceMembers(currentWorkspaceId);
      }
      // Si el usuario se desautentic√≥, mostrar mensaje de autenticaci√≥n requerida
      else if (!user && currentWorkspaceId) {
        showErrorMessage('Tu sesi√≥n ha expirado. <a href="/login" class="text-blue-600 hover:text-blue-800">Haz clic aqu√≠ para iniciar sesi√≥n nuevamente</a>', false);
      }

      // Si el usuario se autentic√≥ y estamos en vista de miembros, verificar si necesitamos cargar
      if (user) {
        const currentState = dashboardView.get();
        if (currentState.currentView === 'members' && currentState.selectedWorkspaceId && currentWorkspaceId !== currentState.selectedWorkspaceId) {
          console.log('üîÑ Usuario autenticado y vista de miembros activa, cargando workspace:', currentState.selectedWorkspaceId);
          loadWorkspaceMembers(currentState.selectedWorkspaceId);
        }
      }
    });
  }

  // Verificar si ya hay un usuario autenticado al inicializar
  function checkInitialAuthState() {
    if (auth.currentUser) {
      console.log('üî• Usuario ya autenticado al inicializar:', auth.currentUser.uid);
      currentUser = auth.currentUser;

      // Verificar inmediatamente el estado del store
      const currentState = dashboardView.get();
      console.log('üîç Estado del store al inicializar:', {
        currentView: currentState.currentView,
        selectedWorkspaceId: currentState.selectedWorkspaceId
      });

      // Si estamos en vista de miembros y hay un workspace seleccionado, cargar inmediatamente
      if (currentState.currentView === 'members' && currentState.selectedWorkspaceId) {
        console.log('ÔøΩ Inicializando con vista de miembros activa, cargando workspace:', currentState.selectedWorkspaceId);
        loadWorkspaceMembers(currentState.selectedWorkspaceId);
      }
    } else {
      console.log('üî• No hay usuario autenticado al inicializar, esperando...');
    }
  }

  // Inicializar cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', () => {
    console.log('üèÅ Inicializando MembersTab...');
    
    // Inicializar en orden espec√≠fico para asegurar timing correcto
    checkInitialAuthState();
    setupAuthListener();
    setupDashboardStoreListener();

    // Verificaci√≥n final despu√©s de un breve delay para asegurar que todo est√© inicializado
    setTimeout(() => {
      const currentState = dashboardView.get();
      console.log('üîç Verificaci√≥n final del estado despu√©s de inicializaci√≥n:', {
        currentView: currentState.currentView,
        selectedWorkspaceId: currentState.selectedWorkspaceId,
        hasUser: !!currentUser,
        currentWorkspaceId: currentWorkspaceId
      });

      // Si todo est√° listo y estamos en vista de miembros, cargar inmediatamente
      if (currentState.currentView === 'members' && currentState.selectedWorkspaceId && currentUser) {
        if (currentWorkspaceId !== currentState.selectedWorkspaceId) {
          console.log('ÔøΩ Carga final: Detectado workspace en vista de miembros, cargando:', currentState.selectedWorkspaceId);
          loadWorkspaceMembers(currentState.selectedWorkspaceId);
        } else {
          console.log('üîÑ Carga final: Workspace ya cargado, omitiendo');
        }
      } else {
        console.log('‚è≥ Carga final: Condiciones no cumplidas para carga autom√°tica');
      }
    }, 200);
  });

  // Exponer funciones globalmente para el componente padre
  (window as any).MembersTab = {
    loadWorkspaceMembers,
    inviteMember
  };
</script></content>
<parameter name="filePath">c:\Users\Wil\Desktop\ProyectoGestor\GestorProyectosClone\Gestor-de-Tareas-Mock\src\components\dashboard\MembersTab.astro
