---
// src/components/dashboard/MembersTab.astro
// Componente lazy para la secci√≥n de miembros
---

<div id="members-content" class="tab-content">
  <div class="mb-6">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-semibold text-gray-800">Miembros del Espacio de Trabajo</h3>
      <div class="flex items-center space-x-2">
        <button id="generate-link-btn" class="px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-2" title="Generar enlace de invitaci√≥n compartible">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
          </svg>
          <span class="hidden sm:inline">Enlace</span>
        </button>
        <button id="invite-member-btn" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          <span>Invitar miembros</span>
        </button>
      </div>
    </div>
    <p class="text-sm text-gray-600 mt-2">Los miembros del Espacio de trabajo pueden ver todos los tableros visibles para el Espacio de trabajo, unirse a ellos y crear nuevos tableros en el Espacio de trabajo.</p>
  </div>

  <!-- Lista de miembros -->
  <div id="members-list" class="space-y-3">
    <div class="text-center text-gray-500 py-8">
      Cargando miembros...
    </div>
  </div>
</div>

<script>
  // Script espec√≠fico para la gesti√≥n de miembros
  import { subscribeToWorkspaceMembers } from '../../firebase/api';
  import { authStore } from '../../stores/auth.store';
  import { dashboardView } from '../../store/store';
  import { createShareableLink } from '../../firebase/invitations';

  let membersUnsubscribe: any = null;
  let currentWorkspaceId: string = '';
  let currentUser: any = null;
  let authTimeoutId: any = null;

  // Funci√≥n para mostrar mensajes de error usando el sistema de toast
  function showErrorMessage(message: string, isError: boolean = true) {
    console.error('‚ùå MembersTab Error:', message);

    // Intentar usar el sistema de toast si est√° disponible
    if (typeof (window as any).showToast === 'function') {
      (window as any).showToast({
        message: message,
        type: isError ? 'error' : 'warning',
        duration: 5000
      });
    } else {
      // Fallback: mostrar alert
      alert(message);
    }
  }

  // Funci√≥n para mostrar mensajes de √©xito
  function showSuccessMessage(message: string) {
    console.log('‚úÖ MembersTab Success:', message);

    // Intentar usar el sistema de toast si est√° disponible
    if (typeof (window as any).showToast === 'function') {
      (window as any).showToast({
        message: message,
        type: 'success',
        duration: 3000
      });
    }
  }

  // Funci√≥n para manejar visibilidad del componente
  function handleVisibility(state: any) {
    console.log('üë• MembersTab: handleVisibility llamado con estado:', state);

    if (state.currentView === 'members' && state.selectedWorkspaceId) {
      console.log('üë• MembersTab: Vista de miembros activa para workspace:', state.selectedWorkspaceId);

      // Esperar a que el authStore est√© listo antes de cargar miembros
      waitForAuthAndLoadMembers(state.selectedWorkspaceId);
    } else {
      console.log('üë• MembersTab: Vista de miembros inactiva');
      // No necesitamos ocultar nada aqu√≠, el contenedor padre se encarga de eso
    }
  }

  // Funci√≥n para esperar a que auth est√© listo y luego cargar miembros
  async function waitForAuthAndLoadMembers(workspaceId: string) {
    console.log('üë• MembersTab: Esperando autenticaci√≥n para workspace:', workspaceId);

    // Verificar estado actual de auth
    const currentAuthState = authStore.getState();

    // Si ya tenemos un usuario autenticado, cargar inmediatamente
    if (currentAuthState.isAuthenticated && currentAuthState.user) {
      console.log('üë• MembersTab: Usuario ya autenticado, cargando miembros inmediatamente');
      loadWorkspaceMembers(workspaceId);
      return;
    }

    // Si est√° cargando, esperar a que termine
    if (currentAuthState.isLoading) {
      console.log('üë• MembersTab: Auth est√° cargando, esperando...');

      // Limpiar timeout anterior si existe
      if (authTimeoutId) {
        clearTimeout(authTimeoutId);
        authTimeoutId = null;
      }

      // Configurar un listener √∫nico para este caso espec√≠fico
      const unsubscribe = authStore.subscribe((authState) => {
        if (!authState.isLoading) {
          unsubscribe(); // Remover este listener √∫nico

          if (authState.isAuthenticated && authState.user) {
            // Cancelar timeout ya que auth se resolvi√≥ exitosamente
            if (authTimeoutId) {
              clearTimeout(authTimeoutId);
              authTimeoutId = null;
            }
            console.log('üë• MembersTab: Auth cargado exitosamente, cargando miembros');
            loadWorkspaceMembers(workspaceId);
          } else {
            console.log('üë• MembersTab: Auth cargado pero usuario no autenticado');
            showErrorMessage('Debes iniciar sesi√≥n para ver los miembros del workspace. <a href="/login" class="text-blue-600 hover:text-blue-800">Haz clic aqu√≠ para iniciar sesi√≥n</a>', false);
          }
        }
      });

      // Timeout de seguridad (10 segundos m√°ximo)
      authTimeoutId = setTimeout(() => {
        unsubscribe();
        console.log('üë• MembersTab: Timeout esperando auth, mostrando mensaje de error');
        showErrorMessage('La autenticaci√≥n est√° tardando m√°s de lo esperado. <a href="/login" class="text-blue-600 hover:text-blue-800">Haz clic aqu√≠ para iniciar sesi√≥n</a>', false);
        authTimeoutId = null;
      }, 10000);

    } else {
      // Auth no est√° cargando y no hay usuario
      console.log('üë• MembersTab: Auth no est√° cargando y no hay usuario, mostrando mensaje de error');
      showErrorMessage('Debes iniciar sesi√≥n para ver los miembros del workspace. <a href="/login" class="text-blue-600 hover:text-blue-800">Haz clic aqu√≠ para iniciar sesi√≥n</a>', false);
    }
  }

  // Funci√≥n para generar enlace de invitaci√≥n compartible
  async function handleGenerateLink() {
    console.log('üîó Generando enlace de invitaci√≥n compartible');

    const currentState = dashboardView.get();
    if (!currentState.selectedWorkspaceId) {
      showErrorMessage('Error: No se puede generar enlace sin workspace seleccionado');
      return;
    }

    try {
      // Crear un enlace compartible usando la nueva funci√≥n
      const result = await createShareableLink(currentState.selectedWorkspaceId, 'Enlace compartible generado autom√°ticamente');

      if (result.success && result.invitationId && result.invitationLink) {
        const invitationLink = result.invitationLink;

        // Intentar copiar al portapapeles
        try {
          await navigator.clipboard.writeText(invitationLink);
          showSuccessMessage('Enlace de invitaci√≥n copiado al portapapeles. Comparte este enlace para invitar miembros.');
          console.log('‚úÖ Enlace generado y copiado:', invitationLink);
        } catch (clipboardError) {
          console.warn('‚ö†Ô∏è No se pudo copiar al portapapeles:', clipboardError);
          // Fallback: mostrar el enlace para copiar manualmente
          const copyManually = confirm(`Enlace generado exitosamente:\n\n${invitationLink}\n\n¬øQuieres copiarlo manualmente? Presiona OK para abrir un campo de texto.`);

          if (copyManually) {
            // Crear un campo de texto temporal para copiar
            const textArea = document.createElement('textarea');
            textArea.value = invitationLink;
            textArea.style.position = 'fixed';
            textArea.style.left = '-9999px';
            document.body.appendChild(textArea);
            textArea.select();
            textArea.setSelectionRange(0, 99999);

            try {
              document.execCommand('copy');
              showSuccessMessage('Enlace copiado manualmente. Comparte este enlace para invitar miembros.');
            } catch (fallbackError) {
              console.warn('‚ö†Ô∏è Fallback tambi√©n fall√≥:', fallbackError);
              showSuccessMessage(`Enlace generado: ${invitationLink} (c√≥pialo manualmente)`);
            } finally {
              document.body.removeChild(textArea);
            }
          } else {
            showSuccessMessage(`Enlace generado: ${invitationLink} (c√≥pialo manualmente)`);
          }
        }
      } else {
        showErrorMessage(result.error || 'Error generando enlace de invitaci√≥n');
      }
    } catch (error) {
      console.error('‚ùå Error generando enlace:', error);
      showErrorMessage('Error generando enlace de invitaci√≥n');
    }
  }

  // Funci√≥n para invitar miembros (abrir modal)
  function handleInviteMember() {
    console.log('üë• Abriendo modal para invitar miembros');

    const currentState = dashboardView.get();
    if (!currentState.selectedWorkspaceId) {
      showErrorMessage('Error: No se puede invitar miembros sin workspace seleccionado');
      return;
    }

    // Usar la funci√≥n global del modal
    if (typeof (window as any).showInviteModal === 'function') {
      (window as any).showInviteModal(currentState.selectedWorkspaceId);
    } else {
      showErrorMessage('Error: Modal de invitaci√≥n no disponible');
    }
  }

  // Esperar a que el DOM est√© listo
  function initializeComponent() {
    console.log('üë• MembersTab: Inicializando componente...');

    // Suscribirse a cambios del authStore para obtener el usuario actual
    const authUnsubscribe = authStore.subscribe((authState) => {
      console.log('üë• MembersTab: Auth state cambi√≥:', authState.isAuthenticated);
      const wasAuthenticated = !!currentUser;
      currentUser = authState.user;

      // Si acabamos de autenticar y estamos en vista de miembros, cargar miembros
      if (!wasAuthenticated && authState.isAuthenticated && authState.user) {
        const currentState = dashboardView.get();
        if (currentState.currentView === 'members' && currentState.selectedWorkspaceId) {
          console.log('üë• MembersTab: Usuario reci√©n autenticado, cargando miembros para workspace:', currentState.selectedWorkspaceId);
          loadWorkspaceMembers(currentState.selectedWorkspaceId);
        }
      }
    });

    // Suscribirse a cambios del store para manejar visibilidad
    const dashboardUnsubscribe = dashboardView.subscribe((state) => {
      console.log('üë• MembersTab: Dashboard store cambi√≥:', state);
      handleVisibility(state);
    });

    // Verificar estado inicial
    const initialAuthState = authStore.getState();
    console.log('üë• MembersTab: Estado inicial de auth:', initialAuthState.isAuthenticated);
    currentUser = initialAuthState.user;

    const initialDashboardState = dashboardView.get();
    console.log('üë• MembersTab: Estado inicial del dashboard:', initialDashboardState);

    // Si el estado inicial ya requiere cargar miembros, hacerlo
    if (initialDashboardState.currentView === 'members' && initialDashboardState.selectedWorkspaceId) {
      console.log('üë• MembersTab: Estado inicial requiere cargar miembros');
      handleVisibility(initialDashboardState);
    }

    // Configurar event listeners para los botones
    const generateLinkBtn = document.getElementById('generate-link-btn');
    const inviteMemberBtn = document.getElementById('invite-member-btn');

    if (generateLinkBtn) {
      generateLinkBtn.addEventListener('click', handleGenerateLink);
      console.log('üë• MembersTab: Event listener configurado para generate-link-btn');
    }

    if (inviteMemberBtn) {
      inviteMemberBtn.addEventListener('click', handleInviteMember);
      console.log('üë• MembersTab: Event listener configurado para invite-member-btn');
    }

    // Almacenar referencias para cleanup si es necesario
    (window as any).membersTabUnsubscribers = { authUnsubscribe, dashboardUnsubscribe };
  }

  // Inicializar cuando el DOM est√© listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeComponent);
  } else {
    initializeComponent();
  }

  // Funci√≥n para cargar miembros del workspace
  function loadWorkspaceMembers(workspaceId: string) {
    console.log('üöÄ loadWorkspaceMembers llamada con workspaceId:', workspaceId);

    if (!workspaceId) {
      console.error('‚ùå No workspaceId provided to loadWorkspaceMembers');
      showErrorMessage('Error: No se especific√≥ un workspace v√°lido', false);
      return;
    }

    // Verificar que el usuario est√© autenticado (obtener del store directamente)
    const authState = authStore.getState();
    if (!authState.isAuthenticated || !authState.user) {
      console.error('‚ùå Usuario no autenticado en loadWorkspaceMembers');
      showErrorMessage('Error de autenticaci√≥n. Por favor, recarga la p√°gina.', true);
      return;
    }

    // Actualizar la variable global currentUser
    currentUser = authState.user;

    // Si es el mismo workspaceId, no recargar
    if (currentWorkspaceId === workspaceId) {
      console.log('üîÑ Mismo workspaceId, no recargando');
      return;
    }

    currentWorkspaceId = workspaceId;
    console.log('üîÑ Cargando miembros para workspace:', workspaceId, 'usuario:', currentUser.uid);

    // Limpiar suscripci√≥n anterior
    if (membersUnsubscribe) {
      console.log('üßπ Limpiando suscripci√≥n anterior');
      membersUnsubscribe();
      membersUnsubscribe = null;
    }

    // Mostrar loading
    const membersList = document.getElementById('members-list');
    if (membersList) {
      membersList.innerHTML = `
        <div class="text-center text-gray-500 py-8">
          <svg class="animate-spin h-8 w-8 mx-auto mb-4 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Cargando miembros...
        </div>
      `;
    }

    // Suscribirse a cambios en miembros
    try {
      console.log('üì° Suscribi√©ndose a cambios de miembros para workspace:', workspaceId);
      membersUnsubscribe = subscribeToWorkspaceMembers(workspaceId, (members) => {
        console.log('üìä Miembros recibidos para workspace', workspaceId, ':', members.length, 'miembros');
        if (members && members.length > 0) {
          console.log('‚úÖ Miembros v√°lidos recibidos, renderizando...');
          renderMembers(members);
        } else {
          console.log('‚ö†Ô∏è No se recibieron miembros o lista vac√≠a');
          renderMembers([]);
        }
      });
      console.log('‚úÖ Suscripci√≥n a miembros configurada correctamente');
    } catch (error) {
      console.error('‚ùå Error al configurar suscripci√≥n a miembros:', error);
      showErrorMessage('Error al cargar los miembros. Int√©ntalo de nuevo.', true);
      return;
    }

    // Configurar timeout para detectar si no se reciben datos
    setTimeout(() => {
      const membersList = document.getElementById('members-list');
      if (membersList && membersList.innerHTML.includes('Cargando miembros')) {
        console.warn('‚ö†Ô∏è Timeout: No se recibieron datos de miembros despu√©s de 10 segundos para workspace:', workspaceId);
        showErrorMessage('La carga de miembros est√° tardando m√°s de lo esperado. Puede ser un problema de conexi√≥n o permisos.', true);
      }
    }, 10000);
  }

  // Funci√≥n showErrorMessage eliminada - ahora usa el sistema de toast global
  // La funci√≥n duplicada fue removida para evitar conflictos

  // Funci√≥n para renderizar lista de miembros
  function renderMembers(members: any[]) {
    console.log('üé® Renderizando miembros:', members?.length || 0, 'miembros');
    
    const membersList = document.getElementById('members-list');
    if (!membersList) {
      console.error('‚ùå No se encontr√≥ el elemento members-list');
      return;
    }

    if (!members || members.length === 0) {
      console.log('üì≠ No hay miembros para mostrar');
      membersList.innerHTML = `
        <div class="text-center text-gray-500 py-8">
          <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a4 4 0 00-3-3.87M9 20H4v-2a4 4 0 013-3.87M16 3.13a4 4 0 010 7.75M8 3.13a4 4 0 000 7.75"></path>
          </svg>
          <p class="text-sm">No hay miembros en este workspace</p>
          <p class="text-xs text-gray-400 mt-1">Los miembros aparecer√°n aqu√≠ cuando sean agregados</p>
        </div>
      `;
      return;
    }

    console.log('‚úÖ Renderizando', members.length, 'miembros');
    membersList.innerHTML = members.map(member => {
      const displayName = member.displayName || member.email?.split('@')[0] || 'Usuario';
      const email = member.email || '';
      const role = member.role || 'member';
      const initials = displayName.charAt(0).toUpperCase();

      console.log('üë§ Renderizando miembro:', { displayName, email, role });

      return `
        <div class="flex items-center justify-between p-4 bg-white rounded-lg border border-gray-200 hover:shadow-sm transition-shadow">
          <div class="flex items-center space-x-3">
            <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold">
              ${initials}
            </div>
            <div>
              <p class="font-medium text-gray-900">${displayName}</p>
              <p class="text-sm text-gray-600">${email}</p>
            </div>
          </div>
          <div class="flex items-center space-x-2">
            <span class="px-2 py-1 text-xs font-medium rounded-full ${
              role === 'owner' ? 'bg-purple-100 text-purple-800' :
              role === 'admin' ? 'bg-blue-100 text-blue-800' :
              'bg-gray-100 text-gray-800'
            }">
              ${role === 'owner' ? 'Propietario' :
                role === 'admin' ? 'Administrador' : 'Miembro'}
            </span>
            <button class="text-gray-400 hover:text-gray-600 p-1 rounded" title="Opciones">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01"></path>
              </svg>
            </button>
          </div>
        </div>
      `;
    }).join('');

    console.log('‚úÖ Miembros renderizados exitosamente');
  }
</script>