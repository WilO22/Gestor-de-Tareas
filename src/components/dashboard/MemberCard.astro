---
// // src/components/dashboard/MemberCard.astro
// // Componente Astro puro para renderizar una tarjeta de miembro individual
// // REFACTORIZACI√ìN: Extra√≠do para mejor organizaci√≥n y reutilizaci√≥n

interface Props {
  member: {
    userId: string;
    email: string;
    displayName?: string;
    role: string;
    joinedAt?: Date;
  };
  currentUserId: string;
  currentUserRole: string;
  workspaceId: string;
}

const { member, currentUserId, currentUserRole, workspaceId } = Astro.props;

// // Calcular permisos y estado
const isCurrentUser = member.userId === currentUserId;
const isOwner = member.role === 'owner';
const canManage = currentUserRole === 'owner' || currentUserRole === 'admin';

// // Determinar si mostrar bot√≥n de opciones
const showOptionsButton = (canManage && !isOwner) || (isCurrentUser && !isOwner);

// // Funci√≥n para obtener clase CSS del rol
function getRoleBadgeClass(role: string): string {
  const classes = {
    owner: 'bg-purple-100 text-purple-800 border-purple-200',
    admin: 'bg-blue-100 text-blue-800 border-blue-200',
    member: 'bg-gray-100 text-gray-800 border-gray-200'
  };
  return classes[role as keyof typeof classes] || classes.member;
}

// // Funci√≥n para obtener nombre del rol
function getRoleDisplayName(role: string): string {
  const names = {
    owner: 'Propietario',
    admin: 'Administrador', 
    member: 'Miembro'
  };
  return names[role as keyof typeof names] || 'Miembro';
}

// // Funci√≥n para obtener iniciales
function getInitials(member: any): string {
  if (member.displayName) {
    return member.displayName.charAt(0).toUpperCase();
  }
  return member.email.charAt(0).toUpperCase();
}

// // Funci√≥n para obtener nombre a mostrar
function getDisplayName(member: any): string {
  return member.displayName || member.email.split('@')[0];
}
---

<div class="member-card flex items-center justify-between p-4 border border-gray-200 rounded-lg bg-white hover:bg-gray-50 transition-colors">
  <!-- // Informaci√≥n del miembro -->
  <div class="flex items-center space-x-3">
    <!-- // Avatar con iniciales -->
    <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold text-lg">
      {getInitials(member)}
    </div>
    
    <!-- // Detalles del miembro -->
    <div class="flex-1 min-w-0">
      <h4 class="font-medium text-gray-900 flex items-center space-x-2">
        <span>{getDisplayName(member)}</span>
        {isCurrentUser && <span class="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">(t√∫)</span>}
      </h4>
      <p class="text-sm text-gray-500 truncate">{member.email}</p>
      {member.joinedAt && (
        <p class="text-xs text-gray-400">
          Se uni√≥: {new Date(member.joinedAt).toLocaleDateString('es-ES', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          })}
        </p>
      )}
    </div>
  </div>
  
  <!-- // Rol y acciones -->
  <div class="flex items-center space-x-3">
    <!-- // Badge del rol -->
    <span class={`px-3 py-1 text-xs font-medium rounded-full border ${getRoleBadgeClass(member.role)}`}>
      {getRoleDisplayName(member.role)}
    </span>
    
    <!-- // Dropdown de cambio de rol (solo para admins sobre miembros no-owner) -->
    {canManage && !isCurrentUser && !isOwner && (
      <div class="relative">
        <button 
          class="role-dropdown-btn text-gray-400 hover:text-gray-600 p-1 rounded"
          data-user-id={member.userId}
          data-current-role={member.role}
          data-member-email={member.email}
          data-workspace-id={workspaceId}
          title="Cambiar rol"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3a4 4 0 118 0v4m-4 12v-7"></path>
          </svg>
        </button>
      </div>
    )}
    
    <!-- // Bot√≥n de opciones (‚ãÆ) -->
    {showOptionsButton && (
      <button 
        class="member-options-btn text-gray-400 hover:text-gray-600 p-1 rounded transition-colors"
        data-user-id={member.userId}
        data-member-email={member.email}
        data-is-owner={isOwner.toString()}
        data-is-current-user={isCurrentUser.toString()}
        data-can-manage={canManage.toString()}
        data-workspace-id={workspaceId}
        title="M√°s opciones"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
        </svg>
      </button>
    )}
  </div>
</div>

<script>
  // // Script espec√≠fico del componente MemberCard
  
  // // Configurar event listeners para este componente
  function setupMemberCardEvents() {
    // // Event listeners para botones de opciones
    document.querySelectorAll('.member-options-btn').forEach(btn => {
      // // Remover listeners anteriores para evitar duplicados
      btn.removeEventListener('click', handleMemberOptionsClick);
      btn.addEventListener('click', handleMemberOptionsClick);
    });
    
    // // Event listeners para cambio de rol
    document.querySelectorAll('.role-dropdown-btn').forEach(btn => {
      btn.removeEventListener('click', handleRoleChangeClick);
      btn.addEventListener('click', handleRoleChangeClick);
    });
  }
  
  // // Handler para click en opciones de miembro
  function handleMemberOptionsClick(e: Event) {
    e.preventDefault();
    e.stopPropagation();
    
    const btn = e.currentTarget as HTMLElement;
    const userId = btn.dataset.userId;
    const memberEmail = btn.dataset.memberEmail;
    const isOwner = btn.dataset.isOwner === 'true';
    const isCurrentUser = btn.dataset.isCurrentUser === 'true';
    const canManage = btn.dataset.canManage === 'true';
    const workspaceId = btn.dataset.workspaceId;
    
    console.log('üîß MemberCard: Click en opciones detectado', {
      userId, memberEmail, isOwner, isCurrentUser, canManage, workspaceId
    });
    
    if (!userId || !memberEmail || !workspaceId) {
      console.error('‚ùå MemberCard: Faltan datos requeridos');
      return;
    }
    
    // // Mostrar men√∫ contextual
    showMemberContextMenu(btn, {
      workspaceId,
      userId,
      memberEmail,
      isOwner,
      isCurrentUser,
      canManage
    });
  }
  
  // // Handler para cambio de rol
  function handleRoleChangeClick(e: Event) {
    e.preventDefault();
    e.stopPropagation();
    
    const btn = e.currentTarget as HTMLElement;
    const userId = btn.dataset.userId;
    const currentRole = btn.dataset.currentRole;
    const memberEmail = btn.dataset.memberEmail;
    const workspaceId = btn.dataset.workspaceId;
    
    if (userId && currentRole && memberEmail && workspaceId) {
      showRoleChangeModal(workspaceId, userId, currentRole, memberEmail);
    }
  }
  
  // // Funci√≥n para mostrar men√∫ contextual de opciones
  function showMemberContextMenu(triggerElement: HTMLElement, options: any) {
    // // Remover men√∫ existente
    document.getElementById('member-context-menu')?.remove();
    
    const rect = triggerElement.getBoundingClientRect();
    const menuItems = [];
    
    // // Opci√≥n para usuario actual (abandonar workspace)
    if (options.isCurrentUser && !options.isOwner) {
      menuItems.push(`
        <button class="context-menu-item w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center space-x-2" 
                data-action="leave">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
          </svg>
          <span>Abandonar espacio de trabajo</span>
        </button>
      `);
    }
    
    // // Opciones para administradores sobre otros miembros
    if (options.canManage && !options.isCurrentUser && !options.isOwner) {
      // // Cambiar rol
      menuItems.push(`
        <button class="context-menu-item w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center space-x-2" 
                data-action="change-role">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
          <span>Cambiar rol</span>
        </button>
      `);
      
      // // Eliminar miembro
      menuItems.push(`
        <button class="context-menu-item w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center space-x-2" 
                data-action="remove">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
          </svg>
          <span>Eliminar del espacio de trabajo</span>
        </button>
      `);
    }
    
    // // Si es propietario, mostrar opciones de gesti√≥n avanzada
    if (options.isOwner && options.isCurrentUser) {
      menuItems.push(`
        <button class="context-menu-item w-full text-left px-4 py-2 text-sm text-blue-600 hover:bg-blue-50 flex items-center space-x-2" 
                data-action="manage-workspace">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
          <span>Configuraci√≥n del workspace</span>
        </button>
      `);
    }
    
    if (menuItems.length === 0) {
      console.log('üîß MemberCard: No hay opciones disponibles para mostrar');
      return;
    }
    
    // // Crear y mostrar men√∫
    const menuHTML = `
      <div id="member-context-menu" class="fixed z-50 bg-white rounded-lg border border-gray-200 shadow-lg py-1 min-w-48" 
           style="left: ${Math.max(10, rect.right - 192)}px; top: ${rect.bottom + 5}px;">
        ${menuItems.join('')}
      </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', menuHTML);
    
    // // Event listeners para opciones del men√∫
    document.querySelectorAll('#member-context-menu .context-menu-item').forEach(item => {
      item.addEventListener('click', async (e) => {
        const action = (e.currentTarget as HTMLElement).dataset.action;
        document.getElementById('member-context-menu')?.remove();
        
        await handleContextMenuAction(action, options);
      });
    });
    
    // // Cerrar men√∫ al hacer clic fuera
    setTimeout(() => {
      const closeMenu = (e: Event) => {
        if (!document.getElementById('member-context-menu')?.contains(e.target as Node)) {
          document.getElementById('member-context-menu')?.remove();
          document.removeEventListener('click', closeMenu);
        }
      };
      document.addEventListener('click', closeMenu);
    }, 10);
  }
  
  // // Manejar acciones del men√∫ contextual
  async function handleContextMenuAction(action: string | undefined, options: any) {
    if (!action) return;
    
    switch (action) {
      case 'leave':
        if (confirm('¬øEst√°s seguro de que quieres abandonar este espacio de trabajo?')) {
          await handleLeaveMember(options);
        }
        break;
      case 'remove':
        if (confirm(`¬øEst√°s seguro de que quieres eliminar a ${options.memberEmail} del espacio de trabajo?`)) {
          await handleRemoveMember(options);
        }
        break;
      case 'change-role':
        showRoleChangeModal(options.workspaceId, options.userId, 'member', options.memberEmail);
        break;
      case 'manage-workspace':
        // // Cambiar a tab de configuraci√≥n
        if (typeof (window as any).switchTab === 'function') {
          (window as any).switchTab('config-tab');
        }
        break;
      default:
        console.warn('üîß MemberCard: Acci√≥n no reconocida:', action);
    }
  }
  
  // // Funciones auxiliares (delegan a m√≥dulos externos)
  async function handleLeaveMember(options: any) {
    if (typeof (window as any).MemberManagementUtils?.handleLeaveMember === 'function') {
      await (window as any).MemberManagementUtils.handleLeaveMember(options);
    } else {
      console.error('‚ùå MemberManagementUtils no disponible');
    }
  }
  
  async function handleRemoveMember(options: any) {
    if (typeof (window as any).MemberManagementUtils?.handleRemoveMember === 'function') {
      await (window as any).MemberManagementUtils.handleRemoveMember(options);
    } else {
      console.error('‚ùå MemberManagementUtils no disponible');
    }
  }
  
  function showRoleChangeModal(workspaceId: string, userId: string, currentRole: string, memberEmail: string) {
    if (typeof (window as any).showRoleChangeModal === 'function') {
      (window as any).showRoleChangeModal(workspaceId, userId, currentRole, memberEmail);
    } else {
      console.error('‚ùå showRoleChangeModal no disponible');
    }
  }
  
  // // Inicializaci√≥n autom√°tica del componente
  setupMemberCardEvents();
  
  // // Hacer funci√≥n disponible globalmente para re-inicializaci√≥n
  (window as any).setupMemberCardEvents = setupMemberCardEvents;
  (window as any).showMemberContextMenu = showMemberContextMenu;
</script>

<style>
  /* // Estilos espec√≠ficos del componente MemberCard */
  .member-card {
    transition: all 0.2s ease-in-out;
  }
  
  .member-card:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .member-options-btn {
    opacity: 0.7;
    transition: opacity 0.2s ease-in-out;
  }
  
  .member-card:hover .member-options-btn {
    opacity: 1;
  }
  
  .role-dropdown-btn {
    opacity: 0.6;
    transition: opacity 0.2s ease-in-out;
  }
  
  .member-card:hover .role-dropdown-btn {
    opacity: 1;
  }
</style>
