---
// src/components/dashboard/WorkspaceGrid.astro
// Componente para mostrar el grid de workspaces
---

<!-- Vista por defecto: Lista de espacios de trabajo -->
<div id="workspaces-view">
  <div class="flex justify-between items-center mb-8">
    <h1 class="text-2xl font-semibold text-gray-800">
      TUS ESPACIOS DE TRABAJO
    </h1>
  </div>

  <div id="workspaces-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    <div id="loading-message" class="col-span-full text-center text-gray-500">
      Cargando espacios de trabajo...
    </div>
  </div>
</div>

<script>
  import { onAuthStateChanged } from "firebase/auth";
  import { auth } from "../../firebase/auth";
  import { createWorkspace, fetchWorkspaces, subscribeToUserWorkspaces } from '../../firebase/api';
  void createWorkspace; void fetchWorkspaces;
  import type { Workspace, User } from '../../types/domain';
  import type { Unsubscribe } from 'firebase/firestore';

  let currentUser: User | null = null;
  let workspacesUnsubscribe: Unsubscribe | null = null;

  // Función para configurar suscripción en tiempo real a workspaces
  function setupRealtimeWorkspaces(userId: string) {
    const workspacesGrid = document.getElementById('workspaces-grid');
    const loadingMessage = document.getElementById('loading-message');

    if (!workspacesGrid || !loadingMessage) {
      console.error('❌ WorkspaceGrid: Elementos del DOM no encontrados');
      return;
    }

    // Cancelar suscripción anterior si existe
    if (workspacesUnsubscribe) {
      workspacesUnsubscribe();
      workspacesUnsubscribe = null;
    }

    // Configurar nueva suscripción en tiempo real
    workspacesUnsubscribe = subscribeToUserWorkspaces(userId, (workspaces: Workspace[]) => {
      // Almacenar la última data para re-renderizado manual si es necesario
      (window as any).lastWorkspacesData = workspaces;

      renderWorkspaces(workspaces);
    });
  }

  // Función para renderizar workspaces
  function renderWorkspaces(workspaces: Workspace[]) {
    const workspacesGrid = document.getElementById('workspaces-grid');
    if (!workspacesGrid) return;

    workspacesGrid.innerHTML = '';

    // Agregar siempre la card de crear workspace al inicio
    const createWorkspaceCard = document.createElement('div');
    createWorkspaceCard.className = 'flex flex-col items-center justify-center p-8 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-400 hover:bg-gray-50 transition-all cursor-pointer min-h-[150px]';
    createWorkspaceCard.innerHTML = `
      <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
      </svg>
      <span class="text-gray-500 text-sm">Crear un espacio de trabajo nuevo</span>
    `;

    // Al hacer click, crear nuevo workspace
    createWorkspaceCard.addEventListener('click', () => {
      createNewWorkspace();
    });

    workspacesGrid.appendChild(createWorkspaceCard);

    if (workspaces.length === 0) {
      // Si no hay workspaces, mostrar mensaje
      const emptyMessage = document.createElement('div');
      emptyMessage.className = 'col-span-full text-center text-gray-500 mt-4';
      emptyMessage.textContent = '¡Crea tu primer espacio de trabajo para empezar!';
      workspacesGrid.appendChild(emptyMessage);
      return;
    }

    // Renderizar workspaces existentes
    workspaces.forEach((workspace: Workspace) => {
      const workspaceCard = document.createElement('div');
      workspaceCard.className = 'block p-4 border rounded-lg shadow-md hover:bg-gray-100 hover:shadow-lg transition-all bg-white cursor-pointer';

      // Mostrar indicador de colaboración si tiene miembros
      const memberCount = workspace.members?.length || 0;
      const memberIndicator = memberCount > 1 ?
        `<span class="ml-2 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">${memberCount} miembros</span>` : '';

      workspaceCard.innerHTML = `
        <div class="flex items-center space-x-3 mb-2">
          <div class="w-8 h-8 bg-pink-500 rounded flex items-center justify-center text-white font-bold text-sm">
            ${workspace.name.charAt(0).toUpperCase()}
          </div>
          <div class="flex-1">
            <h2 class="text-lg font-semibold">${workspace.name}</h2>
            ${memberIndicator}
          </div>
        </div>
        <p class="text-sm text-gray-600">
          ${workspace.ownerId === currentUser?.id ? 'Propietario' : 'Miembro'} • Espacio de trabajo
        </p>
      `;

      // Al hacer click, mostrar los tableros de este workspace
      workspaceCard.addEventListener('click', () => {
        // Emitir evento para cambiar a vista de boards
        window.dispatchEvent(new CustomEvent('showWorkspaceBoards', {
          detail: { workspaceId: workspace.id }
        }));
      });

      workspacesGrid.appendChild(workspaceCard);
    });
  }

  // Función para crear nuevo workspace
  function createNewWorkspace() {
    // Usar modal del header para crear workspace
    const modal = document.getElementById('create-workspace-modal');
    const nameInput = document.getElementById('workspace-name-input') as HTMLInputElement;

    if (modal && nameInput) {
      // Limpiar campo y mostrar modal
      nameInput.value = '';
      modal.style.display = 'block';
      // Enfocar el campo
      setTimeout(() => {
        nameInput.focus();
      }, 100);
    }
  }

  // Inicializar cuando el componente se carga
  onAuthStateChanged(auth, async (user) => {
    if (user) {
      currentUser = {
        id: user.uid,
        email: user.email || 'unknown@email.com',
        displayName: user.displayName || user.email?.split('@')[0] || 'Usuario',
        role: 'user',
        workspaces: [],
        createdAt: new Date()
      };

      // Configurar suscripción en tiempo real a workspaces
      setupRealtimeWorkspaces(user.uid);
    }
  });
</script>
