---
// src/components/board/BoardHeader.astro
// Cabecera secundaria del board con opciones como en Trello
---

<div class="bg-white border-b border-gray-200 px-6 py-3 mb-6">
  <div class="flex items-center justify-between">
    <!-- Lado izquierdo: Buscador -->
    <div class="flex items-center space-x-4">
      <div class="relative">
        <input
          type="text"
          id="board-search"
          placeholder="Buscar tarjetas..."
          class="pl-10 pr-4 py-2 w-80 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
        />
        <svg class="absolute left-3 top-2.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
    </div>

    <!-- Lado derecho: Acciones del board -->
    <div class="flex items-center space-x-3">
      <!-- Bot√≥n Compartir -->
      <button class="flex items-center space-x-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors text-sm font-medium">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
        </svg>
        <span>Compartir</span>
      </button>

      <!-- Men√∫ de opciones (3 puntos) -->
      <div class="relative">
        <button 
          id="board-menu-trigger"
          class="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
          </svg>
        </button>

        <!-- Dropdown del men√∫ -->
        <div 
          id="board-menu-dropdown" 
          class="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50 hidden"
        >
          <!-- Vista principal del men√∫ -->
          <div id="main-menu-view" class="py-2">
            <button 
              id="show-archived-tasks-btn"
              class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center justify-between"
            >
              <div class="flex items-center space-x-3">
                <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8l6 6m0 0l6-6m-6 6v9a2 2 0 01-2 2H7a2 2 0 01-2-2v-9zM3 4h18"></path>
                </svg>
                <span>Elementos archivados</span>
              </div>
              <!-- Flecha para indicar que abre submen√∫ -->
              <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
            
            <hr class="my-1 border-gray-200">
            
            <button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-3">
              <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              </svg>
              <span>Configuraci√≥n del tablero</span>
            </button>
          </div>

          <!-- Vista de elementos archivados (oculta por defecto) -->
          <div id="archived-tasks-view" class="hidden">
            <!-- Header de la vista de archivados -->
            <div class="flex items-center justify-between p-3 border-b border-gray-200 bg-gray-50">
              <button id="back-to-main-menu" class="flex items-center space-x-2 text-gray-600 hover:text-gray-800">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                <span class="text-sm font-medium">Elementos archivados</span>
              </button>
            </div>
            
            <!-- Descripci√≥n informativa -->
            <div class="p-3 bg-blue-50 border-b border-gray-200">
              <p class="text-xs text-blue-700 flex items-start space-x-2">
                <svg class="w-3 h-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>Los elementos archivados pueden ser restaurados al tablero o eliminados permanentemente.</span>
              </p>
            </div>
            
            <!-- Lista de tareas archivadas -->
            <div id="archived-tasks-container" class="max-h-80 overflow-y-auto">
              <div id="archived-tasks-list" class="p-3 space-y-2">
                <!-- Las tareas archivadas se cargar√°n aqu√≠ din√°micamente -->
                <div id="loading-archived" class="text-center py-8 text-gray-500 text-sm">
                  Cargando elementos archivados...
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- // Modal din√°mico de confirmaci√≥n de eliminaci√≥n (fuera del contenedor con scroll) -->
<div id="delete-task-modal" class="absolute bg-white rounded-lg shadow-lg border border-gray-200 z-[60] hidden w-72">
  <div class="flex items-center justify-between px-3 py-2 border-b border-gray-200">
    <h3 class="text-sm font-medium text-gray-800">¬øEliminar la tarjeta?</h3>
    <button class="close-global-delete-modal text-gray-400 hover:text-gray-600 transition-colors p-1">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>
  <div class="px-3 py-3">
    <p class="text-gray-600 text-xs mb-3 leading-relaxed">
      Se quitar√°n todas las acciones de la fuente de actividades y no podr√°s volver a abrir la tarjeta. No es posible deshacer esta acci√≥n.
    </p>
    <div class="flex space-x-2">
      <button 
        class="confirm-global-delete flex-1 px-3 py-2 bg-red-600 text-white text-xs font-medium rounded hover:bg-red-700 transition-colors"
      >
        Eliminar
      </button>
      <button 
        class="cancel-global-delete flex-1 px-3 py-1 bg-gray-100 text-gray-700 text-xs rounded hover:bg-gray-200 transition-colors"
      >
        Cancelar
      </button>
    </div>
  </div>
</div>

<script>
  // Script para manejar el dropdown del men√∫ y navegaci√≥n entre vistas
  document.addEventListener('DOMContentLoaded', () => {
    // Flag para evitar inicializaci√≥n m√∫ltiple
    if ((window as any).boardHeaderInitialized) {
      console.log('‚ÑπÔ∏è BoardHeader ya inicializado, saltando...');
      return;
    }
    (window as any).boardHeaderInitialized = true;
    
    console.log('üöÄ Inicializando BoardHeader...');
    const menuTrigger = document.getElementById('board-menu-trigger');
    const menuDropdown = document.getElementById('board-menu-dropdown');
    const archivedTasksBtn = document.getElementById('show-archived-tasks-btn');
    
    // Elementos de navegaci√≥n entre vistas
    const mainMenuView = document.getElementById('main-menu-view');
    const archivedTasksView = document.getElementById('archived-tasks-view');
    const backToMainBtn = document.getElementById('back-to-main-menu');

    // Funci√≥n para mostrar vista principal del men√∫
    function showMainMenuView() {
      mainMenuView?.classList.remove('hidden');
      archivedTasksView?.classList.add('hidden');
    }

    // Funci√≥n para mostrar vista de elementos archivados
    function showArchivedTasksView() {
      mainMenuView?.classList.add('hidden');
      archivedTasksView?.classList.remove('hidden');
      
      // Solo cargar tareas archivadas si la lista est√° vac√≠a o no se ha cargado
      const tasksList = document.getElementById('archived-tasks-list');
      const loadingElement = document.getElementById('loading-archived');
      const existingTasks = tasksList?.querySelectorAll('.archived-task-item');
      
      // Verificar si el √∫nico elemento es el mensaje vac√≠o (no tareas reales)
      const hasOnlyEmptyMessage = existingTasks?.length === 1 && 
                                 existingTasks[0].textContent?.includes('No hay elementos archivados');
      
      // Cargar solo si:
      // 1. Est√° mostrando el loading (primera vez)
      // 2. No hay tareas en la lista
      // 3. Solo tiene el mensaje vac√≠o (nueva verificaci√≥n)
      const shouldLoad = loadingElement?.style.display !== 'none' || 
                        !existingTasks || 
                        existingTasks.length === 0 ||
                        hasOnlyEmptyMessage;

      if (shouldLoad && typeof (window as any).loadArchivedColumnsInDropdown === 'function') {
        (window as any).loadArchivedColumnsInDropdown(true); // Forzar recarga para obtener datos frescos
      }
    }

    // Toggle del dropdown principal
    menuTrigger?.addEventListener('click', (e) => {
      e.stopPropagation();
      // Al abrir, siempre mostrar la vista principal primero
      showMainMenuView();
      menuDropdown?.classList.toggle('hidden');
    });

    // Evento para mostrar vista de elementos archivados
    archivedTasksBtn?.addEventListener('click', (e) => {
      e.stopPropagation();
      console.log('üéØ Click en bot√≥n "Elementos archivados"');
      showArchivedTasksView();
    });

    // Evento para volver a la vista principal
    backToMainBtn?.addEventListener('click', (e) => {
      e.stopPropagation();
      console.log('üéØ Click en bot√≥n "Volver"');
      showMainMenuView();
    });

    // Event listeners para acciones de tareas archivadas (restaurar/eliminar)
    const archivedTasksContainer = document.getElementById('archived-tasks-container');
    console.log('üîß Configurando event listeners para tareas archivadas:', !!archivedTasksContainer);
    
    // // Variables para el modal din√°mico de eliminaci√≥n (posicionado fuera del scroll)
    const deleteModal = document.getElementById('delete-task-modal');
    let taskToDelete: string | null = null;
    
    // Event listener para cerrar modal al hacer click fuera
    document.addEventListener('click', (e) => {
      if (deleteModal && !deleteModal.classList.contains('hidden')) {
        const target = e.target as HTMLElement;
        // Cerrar si se hace click fuera del modal y no es un bot√≥n de eliminar
        if (!deleteModal.contains(target) && !target.closest('.delete-task')) {
          deleteModal.classList.add('hidden');
          taskToDelete = null;
        }
      }
    });
    
    // // Event listeners espec√≠ficos para el modal global (fuera del contenedor de scroll)
    deleteModal?.addEventListener('click', async (e) => {
      const target = e.target as HTMLElement;
      e.stopPropagation(); // Evitar que se cierre el modal
      
      console.log('üéØ Click detectado en modal global:', { 
        target: target.tagName, 
        classList: target.classList.toString(),
        taskToDelete: taskToDelete
      });
      
      // // Manejo de bot√≥n "Cerrar modal" en modal global
      if (target.closest('.close-global-delete-modal')) {
        console.log('‚ùå Cerrando modal sin eliminar');
        deleteModal.classList.add('hidden');
        taskToDelete = null;
      }
      
      // // Manejo de bot√≥n "Cancelar" en modal global
      else if (target.closest('.cancel-global-delete')) {
        console.log('üö´ Cancelando eliminaci√≥n');
        deleteModal.classList.add('hidden');
        taskToDelete = null;
      }
      
      // // Manejo de bot√≥n "Confirmar eliminaci√≥n" en modal global
      else if (target.closest('.confirm-global-delete')) {
        console.log('‚úÖ Confirmar eliminaci√≥n de tarea:', taskToDelete);
        
        if (!taskToDelete) {
          console.warn('‚ö†Ô∏è No hay tarea para eliminar');
          return;
        }
        
        try {
          // // Cerrar el modal antes de la operaci√≥n
          deleteModal.classList.add('hidden');
          
          // // Llamar funci√≥n global de eliminar (definida en board-page.ts)
          if (typeof (window as any).deleteTask === 'function') {
            console.log('üîÑ Llamando funci√≥n deleteTask para:', taskToDelete);
            const result = await (window as any).deleteTask(taskToDelete);
            console.log('üìä Resultado de eliminaci√≥n:', result);
            
            if (result && result.success) {
              console.log('‚úÖ Tarea eliminada permanentemente:', taskToDelete);
              
              // // Buscar y remover la tarjeta del DOM con animaci√≥n suave
              const taskCardToRemove = document.querySelector(`[data-task-id="${taskToDelete}"]`) as HTMLElement;
              if (taskCardToRemove) {
                taskCardToRemove.style.transform = 'translateX(100%)';
                taskCardToRemove.style.opacity = '0';
                taskCardToRemove.style.transition = 'transform 300ms ease-out, opacity 300ms ease-out';
                
                setTimeout(() => {
                  console.log('üóëÔ∏è Removiendo tarjeta del DOM tras eliminar:', taskToDelete);
                  taskCardToRemove.remove();
                  
                  // Verificar si no quedan m√°s tareas archivadas
                  const tasksList = document.getElementById('archived-tasks-list');
                  const remainingTasks = tasksList?.querySelectorAll('.archived-task-item');
                  console.log('üìä Tareas restantes despu√©s de eliminar:', remainingTasks?.length || 0);
                  
                  if (remainingTasks && remainingTasks.length === 0) {
                    // Para eliminaci√≥n S√ç verificamos si hay m√°s elementos en Firebase
                    console.log('üîÑ No quedan elementos visibles tras eliminar, verificando en Firebase...');
                    if (typeof (window as any).loadArchivedColumnsInDropdown === 'function') {
                      (window as any).loadArchivedColumnsInDropdown(true); // Forzar recarga para verificar
                    }
                  }
                }, 300);
              }
            } else {
              console.error('‚ùå La eliminaci√≥n no fue exitosa:', result);
            }
          } else {
            console.error('‚ùå Funci√≥n deleteTask no encontrada en window');
          }
          
          // // Resetear variable
          taskToDelete = null;
        } catch (error) {
          console.error('‚ùå Error eliminando tarea:', error);
          taskToDelete = null;
        }
      }
    });
    
    // Set para rastrear tareas que est√°n siendo restauradas (evitar conflictos de timing)
    const tasksBeingRestored = new Set();
    
    // // Funci√≥n para posicionar din√°micamente el modal debajo del bot√≥n eliminar
    // // Actualizada para aceptar modal personalizado y ser m√°s flexible
    function positionDeleteModal(buttonElement: HTMLElement, customModal?: HTMLElement) {
      const modalToPosition = customModal || deleteModal;
      if (!modalToPosition) return;
      
      const rect = buttonElement.getBoundingClientRect();
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
      
      // // Mantener position como fixed si ya est√° establecido, sino usar absolute
      if (!modalToPosition.style.position) {
        modalToPosition.style.position = 'absolute';
      }
      modalToPosition.style.top = `${rect.bottom + scrollTop + 2}px`; // 2px de margen
      modalToPosition.style.left = `${rect.left + scrollLeft}px`;
      
      // // Verificar si el modal se sale por la derecha de la pantalla
      const modalWidth = 288; // w-72 = 288px
      if (rect.left + modalWidth > window.innerWidth) {
        // Alinear a la derecha del bot√≥n
        modalToPosition.style.left = `${rect.right + scrollLeft - modalWidth}px`;
      }
      
      console.log('üìç Modal posicionado en:', { 
        top: modalToPosition.style.top, 
        left: modalToPosition.style.left,
        buttonRect: rect 
      });
    }
    
    // // Event delegation para manejar todos los clicks en el contenedor de elementos archivados (tareas Y columnas)
    archivedTasksContainer?.addEventListener('click', async (e) => {
      const target = e.target as HTMLElement;
      
      // // EXTENDIDO: Buscar tanto tareas como columnas
      const taskCard = target.closest('[data-task-id]') as HTMLElement;
      const columnCard = target.closest('[data-column-id]') as HTMLElement;
      const taskId = taskCard?.getAttribute('data-task-id');
      const columnId = columnCard?.getAttribute('data-column-id');
      
      if ((window as any).__DEBUG__) {
        console.log('üéØ Click detectado en container archivados:', { 
          target: target.tagName, 
          taskId, 
          columnId, // // AGREGADO: log del columnId
          classList: target.classList.toString(),
          closestRestore: !!target.closest('.restore-task'),
          closestDelete: !!target.closest('.delete-task'),
          closestRestoreColumn: !!target.closest('.restore-column'), // // AGREGADO: restore column
          closestDeleteColumn: !!target.closest('.delete-column'), // // AGREGADO: delete column
          closestConfirm: !!target.closest('.confirm-delete'),
          closestCancel: !!target.closest('.cancel-delete'),
          closestClose: !!target.closest('.close-delete-modal')
        });
      }
      
      // // CAMBIADO: Manejar tanto tareas como columnas
      if (!taskId && !columnId) return;
      
      // // === MANEJO DE COLUMNAS ARCHIVADAS ===
      if (columnId) {
        console.log('üóÇÔ∏è Procesando acci√≥n en columna archivada:', columnId);
        
        // // Manejo de bot√≥n "Restaurar Columna"
        if (target.closest('.restore-column')) {
          e.stopPropagation();
          console.log('üîÑ Intentando restaurar columna:', columnId);
          console.log('üîç Estado de funciones globales:', {
            optimizedRestoreColumn: typeof (window as any).optimizedRestoreColumn,
            showColumnDeleteModal: typeof (window as any).showColumnDeleteModal,
            optimizedRestoreTask: typeof (window as any).optimizedRestoreTask,
            deleteTask: typeof (window as any).deleteTask
          });
          
          try {
            // // Llamar funci√≥n global de restaurar columna (definida en board-page.ts)
            if (typeof (window as any).optimizedRestoreColumn === 'function') {
              const result = await (window as any).optimizedRestoreColumn(columnId);
              console.log('‚úÖ Resultado de restauraci√≥n de columna:', result);
            } else {
              console.error('‚ùå Funci√≥n optimizedRestoreColumn no encontrada en window');
            }
          } catch (error) {
            console.error('‚ùå Error restaurando columna:', error);
          }
          return; // // Importante: return para no procesar como tarea
        }
        
        // // Manejo de bot√≥n "Eliminar Columna" - mostrar modal din√°mico
        if (target.closest('.delete-column')) {
          e.stopPropagation();
          console.log('üóëÔ∏è Mostrar modal de eliminaci√≥n para columna:', columnId);
          console.log('üîç Estado de funciones globales:', {
            optimizedRestoreColumn: typeof (window as any).optimizedRestoreColumn,
            showColumnDeleteModal: typeof (window as any).showColumnDeleteModal,
            optimizedRestoreTask: typeof (window as any).optimizedRestoreTask,
            deleteTask: typeof (window as any).deleteTask
          });
          
          const _deleteButton = target.closest('.delete-column') as HTMLElement;
          const columnName = columnCard.querySelector('span')?.textContent || 'Sin nombre';
          
          try {
            // // Llamar funci√≥n global para mostrar modal de eliminaci√≥n de columna
            if (typeof (window as any).showColumnDeleteModal === 'function') {
              (window as any).showColumnDeleteModal(columnId, columnName, _deleteButton);
            } else {
              console.error('‚ùå Funci√≥n showColumnDeleteModal no encontrada en window');
            }
          } catch (error) {
            console.error('‚ùå Error mostrando modal de eliminaci√≥n:', error);
          }
          return; // // Importante: return para no procesar como tarea
        }
      }
      
      // // === MANEJO DE TAREAS ARCHIVADAS (c√≥digo existente) ===
      if (!taskId) return; // // Solo procesar tareas si hay taskId
      
      // // Manejo de bot√≥n "Restaurar"
      if (target.closest('.restore-task')) {
        e.stopPropagation();
        
        // Evitar doble restauraci√≥n
        if (tasksBeingRestored.has(taskId)) {
          console.log('‚è≥ Tarea ya est√° siendo restaurada, ignorando click:', taskId);
          return;
        }
        
        console.log('üîÑ Intentando restaurar tarea:', taskId);
        tasksBeingRestored.add(taskId); // Marcar como siendo restaurada
        
        // Deshabilitar botones para evitar clicks adicionales
        const restoreBtn = taskCard.querySelector('.restore-task') as HTMLElement;
        const deleteBtn = taskCard.querySelector('.delete-task') as HTMLElement;
        if (restoreBtn) restoreBtn.style.pointerEvents = 'none';
        if (deleteBtn) deleteBtn.style.pointerEvents = 'none';
        
        try {
          // // Llamar funci√≥n global de restaurar (definida en board-page.ts)
          if (typeof (window as any).optimizedRestoreTask === 'function') {
            const result = await (window as any).optimizedRestoreTask(taskId);
            console.log('‚úÖ Resultado de restauraci√≥n:', result);
          }
        } catch (error) {
          console.error('‚ùå Error restaurando tarea:', error);
        } finally {
          // // Limpiar estado de restauraci√≥n independientemente del resultado
          tasksBeingRestored.delete(taskId);
          if (restoreBtn) restoreBtn.style.pointerEvents = 'auto';
          if (deleteBtn) deleteBtn.style.pointerEvents = 'auto';
        }
      } 
      
      // // Manejo de bot√≥n "Eliminar" - mostrar modal din√°mico posicionado debajo del bot√≥n
      else if (target.closest('.delete-task')) {
        e.stopPropagation();
        console.log('üóëÔ∏è Mostrar modal de eliminaci√≥n para tarea:', taskId);
        
        const deleteButton = target.closest('.delete-task') as HTMLElement;
        taskToDelete = taskId;
        
        // // Posicionar y mostrar el modal din√°mico
        if (deleteModal && deleteButton) {
          positionDeleteModal(deleteButton);
          deleteModal.classList.remove('hidden');
        }
      }
    });
    
    // // Cerrar modales al hacer click fuera
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      // Si el click no es dentro de un modal o sus controles, cerrar todos los modales
      if (!target.closest('[class*="delete-modal-"]') && !target.closest('.delete-task')) {
        document.querySelectorAll('[class*="delete-modal-"]').forEach(modal => {
          (modal as HTMLElement).classList.add('hidden');
        });
      }
    });

    // Exponer funciones globalmente para uso desde board-page.ts
    (window as any).showMainMenuView = showMainMenuView;
    (window as any).showArchivedTasksView = showArchivedTasksView;
    (window as any).positionDeleteModal = positionDeleteModal;

    // Funciones para controlar el event listener que cierra el dropdown
    let dropdownCloseListener: ((e: Event) => void) | null = null;
    let isDropdownCloseListenerPaused = false;

    // Funci√≥n para pausar el event listener que cierra el dropdown
    function pauseDropdownCloseListener() {
      if (dropdownCloseListener && !isDropdownCloseListenerPaused) {
        document.removeEventListener('click', dropdownCloseListener);
        isDropdownCloseListenerPaused = true;
        console.log('‚è∏Ô∏è Event listener de cierre de dropdown pausado');
      }
    }

    // Funci√≥n para reactivar el event listener que cierra el dropdown
    function resumeDropdownCloseListener() {
      if (dropdownCloseListener && isDropdownCloseListenerPaused) {
        document.addEventListener('click', dropdownCloseListener);
        isDropdownCloseListenerPaused = false;
        console.log('‚ñ∂Ô∏è Event listener de cierre de dropdown reactivado');
      }
    }

    // Event listener modificado para que pueda ser pausado
    dropdownCloseListener = (e: Event) => {
      if (isDropdownCloseListenerPaused) {
        console.log('‚è∏Ô∏è Event listener pausado, ignorando click');
        return; // Si est√° pausado, no hacer nada
      }
      
      const target = e.target as Element;
      
      // No cerrar si el click es en el bot√≥n de elementos archivados o sus hijos
      if (target?.id === 'show-archived-tasks-btn' || target?.closest('#show-archived-tasks-btn')) {
        console.log('üéØ Click en bot√≥n de elementos archivados, no cerrar dropdown');
        return;
      }
      
      // No cerrar si el click es en el trigger del men√∫
      if (target?.id === 'board-menu-trigger' || target?.closest('#board-menu-trigger')) {
        console.log('üéØ Click en trigger del men√∫, no cerrar dropdown');
        return;
      }
      
      const isClickOutside = !menuTrigger?.contains(target) && !menuDropdown?.contains(target);
      
      console.log('üéØ Click detectado en document:', {
        target: target?.tagName,
        targetId: target?.id,
        targetClass: target?.className,
        isClickOutside,
        menuDropdownVisible: !menuDropdown?.classList.contains('hidden'),
        isDropdownCloseListenerPaused,
        menuTriggerContains: menuTrigger?.contains(target),
        menuDropdownContains: menuDropdown?.contains(target)
      });
      
      if (isClickOutside) {
        console.log('‚ùå Cerrando dropdown por click fuera');
        menuDropdown?.classList.add('hidden');
        showMainMenuView(); // Resetear a vista principal al cerrar
      }
    };

    // Agregar el event listener usando la funci√≥n almacenada
    document.addEventListener('click', dropdownCloseListener);

    // Exponer las funciones de control del dropdown
    (window as any).pauseDropdownCloseListener = pauseDropdownCloseListener;
    (window as any).resumeDropdownCloseListener = resumeDropdownCloseListener;
    
    console.log('‚úÖ BoardHeader inicializado completamente');
  });
</script>
