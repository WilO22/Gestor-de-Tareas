---
// src/components/ui/Badge.astro
// Componente Badge reutilizable para etiquetas, estados, etc.

export interface Props {
  // Contenido
  text?: string;
  icon?: string;
  iconPosition?: 'left' | 'right';
  
  // Variantes
  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'info' | 'outline' | 'ghost';
  size?: 'xs' | 'sm' | 'md' | 'lg';
  
  // Estados
  removable?: boolean;
  clickable?: boolean;
  selected?: boolean;
  disabled?: boolean;
  
  // Tema y colores
  theme?: 'light' | 'dark' | 'auto';
  accentColor?: 'blue' | 'green' | 'red' | 'yellow' | 'purple' | 'pink' | 'indigo' | 'gray';
  
  // Forma
  shape?: 'rounded' | 'pill' | 'square';
  
  // Accesibilidad
  ariaLabel?: string;
  
  // Clases adicionales
  class?: string;
}

const {
  text,
  icon,
  iconPosition = 'left',
  variant = 'default',
  size = 'md',
  removable = false,
  clickable = false,
  selected = false,
  disabled = false,
  theme = 'auto',
  accentColor = 'blue',
  shape = 'pill',
  ariaLabel,
  class: additionalClasses = ''
} = Astro.props;

// Algunos usos históricos pueden no utilizar accentColor; referenciamos para silenciar ts(6133)
void accentColor;

// Clases base
const baseClasses = [
  'inline-flex items-center font-medium transition-all duration-200',
  'focus:outline-none focus:ring-2 focus:ring-offset-2'
];

// Variantes
const variantClasses = {
  default: 'bg-gray-100 text-gray-800 hover:bg-gray-200',
  primary: 'bg-blue-100 text-blue-800 hover:bg-blue-200',
  secondary: 'bg-gray-100 text-gray-800 hover:bg-gray-200',
  success: 'bg-green-100 text-green-800 hover:bg-green-200',
  warning: 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200',
  danger: 'bg-red-100 text-red-800 hover:bg-red-200',
  info: 'bg-blue-100 text-blue-800 hover:bg-blue-200',
  outline: 'border border-gray-300 text-gray-700 hover:bg-gray-50',
  ghost: 'text-gray-600 hover:bg-gray-100'
};

// Tamaños
const sizeClasses = {
  xs: 'px-2 py-0.5 text-xs',
  sm: 'px-2.5 py-0.5 text-sm',
  md: 'px-3 py-1 text-sm',
  lg: 'px-4 py-1.5 text-base'
};

// Formas
const shapeClasses = {
  rounded: 'rounded',
  pill: 'rounded-full',
  square: 'rounded-none'
};

// Tema
const themeClasses = {
  light: '',
  dark: 'dark',
  auto: ''
};

// Estados
const stateClasses: string[] = [];
if (clickable && !disabled) {
  stateClasses.push('cursor-pointer');
}
if (disabled) {
  stateClasses.push('opacity-50 cursor-not-allowed');
}
if (selected) {
  stateClasses.push('ring-2 ring-blue-500 bg-blue-50');
}
if (removable) {
  stateClasses.push('pr-1');
}

// Clases finales
const badgeClasses = [
  ...baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  shapeClasses[shape],
  themeClasses[theme],
  ...stateClasses,
  additionalClasses
].filter(Boolean).join(' ');

// Contenido del badge
const badgeContent = text || 'Badge';
---

<span class={badgeClasses} role="status" aria-label={ariaLabel}>
  {icon && iconPosition === 'left' && (
    <span class="mr-1">
      <slot name="icon">{icon}</slot>
    </span>
  )}
  
  <span class="truncate">
    <slot>{badgeContent}</slot>
  </span>
  
  {icon && iconPosition === 'right' && (
    <span class="ml-1">
      <slot name="icon">{icon}</slot>
    </span>
  )}
  
  {removable && (
    <button
      class="ml-1 hover:bg-black hover:bg-opacity-10 rounded-full p-0.5 transition-colors"
      aria-label="Remover badge"
      onclick="this.parentElement.remove()"
    >
      <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
      </svg>
    </button>
  )}
</span>
